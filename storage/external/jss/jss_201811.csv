title,abstract
Research article - Open meta-modelling frameworks via meta-object protocols,"AbstractMeta-modelling is central to Model-Driven Engineering. Many meta-modelling notations, approaches and tools have been proposed along the years, which widely vary regarding their supported modelling features. However, current approaches tend to be closed and rigid with respect to the supported concepts and semantics. Moreover, extending the environment with features beyond those natively supported requires highly technical knowledge. This situation hampers flexibility and interoperability of meta-modelling environments.In order to alleviate this situation, we propose open meta-modelling frameworks, which can be extended and configured via meta-object protocols (MOPs). Such environments offer extension points on events like element instantiation, model loading or property access, and enable selecting particular model elements over which the extensions are to be executed. We show how MOP-based mechanisms permit extending meta-modelling frameworks in a flexible way, and allow describing a wide range of meta-modelling concepts. As a proof of concept, we show and compare an implementation in the MetaDepth tool and an aspect-based implementation atop the Eclipse Modelling Framework (EMF). We have evaluated our approach by extending EMF and MetaDepth with modelling services not foreseen initially when they were created. The evaluation shows that MOP-based mechanisms permit extending meta-modelling frameworks in a flexible way, and are powerful enough to support the specification of a broad variety of meta-modelling features."
Research article - Efficient refactoring scheduling based on partial order reduction,"AbstractAnti-patterns are poor solutions to design problems that make software systems hard to understand and to extend. Components involved in anti-patterns are reported to be consistently related to high changes and faults rates. Developers are advised to perform refactoring to remove anti-patterns, and consequently improve software design quality and reliability. However, since the number of anti-patterns in a system can be very large, the process of manual refactoring can be overwhelming. To assist a software engineer who has to perform this task, we propose a novel approach RePOR (Refactoring approach based on Partial Order Reduction). We perform a case study with five open source systems to assess the performance of RePOR against two well-known metaheuristics (Genetic Algorithm, and Ant Colony Optimization), one conflict-aware refactoring approach and, a new approach based on sampling (Sway). Results show that RePOR can correct a median of 73% of anti-patterns (10% more than existing approaches) with a significant reduction in effort (measured by the number of refactorings applied) ranging from 69% to 85%, and a reduction of execution time ranging between 50% and 87%, in comparison to existing approaches."
Research article - Early validation of system requirements and design through correctness-by-construction,"AbstractEarly validation of requirements aims to reduce the need for the high-cost validation testing and corrective measures at late development stages. This work introduces a systematic process for the unambiguous specification of system requirements and the guided derivation of formal properties, which should be implied by the system ’s structure and behavior in conjunction with its external stimuli. This rigorous design takes place through the incremental construction of a model using the BIP (Behavior-Interaction-Priorities) component framework. It allows building complex designs by composing simpler reusable designs enforcing given properties. If some properties are neither enforced nor verified, the model is refined or certain requirements are revised. A validated model provides evidence of requirements’ consistency and design correctness. The process is semi-automated through a new tool and existing verification tools. Its effectiveness was evaluated on a set of requirements for the control software of the CubETH nanosatellite and an extract of software requirements for a Low Earth Orbit observation satellite. Our experience and obtained results helped in identifying open challenges for applying the method in industrial context. These challenges concern with the domain knowledge representation, the expressiveness of used specification languages, the library of reusable designs and scalability."
Research article - Software engineering process models for mobile app development: A systematic literature review,"AbstractContext: An effective development model can help improve competitive advantage and shorten release cycles, which is vital in the fast paced environment of mobile app development.Objective: The aim with this paper is to provide an extensive review of existing mobile app development models.Method: The review is done by following a systematic literature review process. Also presented is an assessment of the usefulness and relevance to industry of the models based on a rigor and relevance framework.Results: 20 primary studies were identified, each with distinct models. Agile methods or state-based principles are commonly adopted across the models. Relatively little effort focuses on deployment, maintenance, project evaluation activities.Conclusion: The review reveals that the contexts in which the identified models are intended to be used vary. This benefits practitioners as they are able to select a model that suits their contexts. However, the usefulness in industry of most of the models, based on the contexts in which the models were evaluated, is questionable. There is a need for evaluating mobile app models in contexts that resemble realistic contexts. The review also calls for further research addressing special constraints of mobile apps, e.g., testing apps on multiple-platforms, user involvement in release planning and continuous deployment."
Research article - Estimating the reputation of newcomer web services using a regression-Based method,"AbstractIn this paper, we propose a novel method to estimate the initial reputation values of newcomer web services. In fact, the reputation of web services is one of the criteria used for recommending services in service-oriented computing environments. The lack of evaluating the initial reputation values can subvert the performance of a service recommendation system making it vulnerable to different threats like whitewashing and Sybil attacks, which negatively affect its quality of recommendation. The proposed method uses Quality of Service (QoS) attributes from a side, and reputation values of similar services from the second side, to estimate the reputation values of newcomer services. Basically, it employs regression models, including Support Vector Regression, in the estimation process of the unknown reputation values of newcomers from their known QoS values. We demonstrate the efficiency of the method in estimating the reputation of newcomer services through statistical evidences gathered from experimentations conducted on a set of real-world web services."
Research article - On the placement of controllers in software-Defined-WAN using meta-heuristic approach,"AbstractSoftware Defined Networks (SDN) is a popular modern network technology that decouples the control logic from the underlying hardware devices. The control logic has implemented as a software entity that resides in a server called controller. In a Software-Defined Wide Area Network (SDWAN) with n nodes; deploying k number of controllers (k < n) is one of the challenging issue. Due to some internal or external factors, when the primary path between switch to controller fails, it severely interrupt the networks’ availability. In this regard, the proposed approach provides a seamless backup mechanism against single link failure with minimum communication delay based on the survivability model. In order to obtain an efficient solution, we have considered controller placement problem (CPP) as a multi-objective combinatorial optimization problem and solve it using two population-based meta-heuristic techniques such as: Particle Swarm Optimization (PSO) and FireFly Algorithm (FFA). For CPP, three metrics have been considered: (a) controller to switch latency, (b) inter-controller latency and (c) multi-path connectivity between the switch and controller. The performance of the algorithms is evaluated on a set of publicly available network topologies in order to obtain the optimum number of controllers, and controller positions. Then we present Average Delay Rise (ADR) metric to measure the increased delay due to the failure of the primary path. By comparing the performance of our scheme to competing scheme, it was found that our proposed scheme effectively improves the survivability of the control path and the performance of the network as well."
Research article - Architecture enforcement concerns and activities - An expert study,"AbstractArchitecture enforcement is concerned with the correct and seamless implementation of architecture design decisions in order to ensure software quality. In a previous study, we conducted an empirical study in order to gain insight into the industrial practice of architecture enforcement. There, we asked 12 software architects from industry about their experience with the architecture enforcement process. As a result, we identified architecture enforcement concerns and activities. In this paper, we extend our contributions of the existing study. Firstly, we conducted five additional interviews with software architects from two different domains, namely the enterprise application and the automotive domain. This adds new architecture concerns and activities to the existing list. Secondly, we conducted a literature review. We compared our findings from the interviews with the results from the literature review and evaluated how architects’ enforcement concerns and activities are discussed in literature. We found that several concerns and activities are already known from literature, but are not viewed in the context of architecture enforcement by the software architecture community. Lastly, we connected the discovered architecture concerns and activities with each other. Those relationships determine the reason why a specific architecture enforcement activity is conducted."
Research article - Evaluations of JaguarCode: A web-based object-oriented programming environment with static and dynamic visualization,"AbstractTo increase program comprehension and overcome learning obstacles of Object-Oriented Programming (OOP), various visualization techniques have been adopted in educational OOP environments. Some provide software development with visual notations without source code, while others support programming with visual aids. Our research supports Java programming along with UML diagrams (class, object, and sequence) and dynamic execution traces of program synchronized in a web-based programming environment - JaguarCode. It aims to help students better understand the static structure and dynamic behavior of Java programs, as well as object-oriented design concepts. This paper reports on the evaluation results of JaguarCode to investigate its effectiveness and user satisfaction through quantitative and qualitative experiments. The experimental results revealed that having both static and dynamic visualizations did positively impact the correctness of program understanding and tracing problems, while the visual representations did affect students' understanding on the program execution of the problems to higher accuracy. It was also observed that students were satisfied with the aspects of those visualizations provided in JaguarCode."
Research article - Improving reusability of software libraries through usage pattern mining,"AbstractModern software systems are increasingly dependent on third-party libraries. It is widely recognized that using mature and well-tested third-party libraries can improve developers’ productivity, reduce time-to-market, and produce more reliable software. Today’s open-source repositories provide a wide range of libraries that can be freely downloaded and used. However, as software libraries are documented separately but intended to be used together, developers are unlikely to fully take advantage of these reuse opportunities. In this paper, we present a novel approach to automatically identify third-party library usage patterns, i.e., collections of libraries that are commonly used together by developers. Our approach employs a hierarchical clustering technique to group together software libraries based on external client usage. To evaluate our approach, we mined a large set of over 6000 popular libraries from Maven Central Repository and investigated their usage by over 38,000 client systems from the Github repository. Our experiments show that our technique is able to detect the majority (77%) of highly consistent and cohesive library usage patterns across a considerable number of client systems."
Research article - SentiStrength-SE: Exploiting domain specificity for improved sentiment analysis in software engineering text,"AbstractAutomated sentiment analysis in software engineering textual artifacts has long been suffering from inaccuracies in those few tools available for the purpose. We conduct an in-depth qualitative study to identify the difficulties responsible for such low accuracy. Majority of the exposed difficulties are then carefully addressed through building a domain dictionary and appropriate heuristics. These domain-specific techniques are then realized in SentiStrength-SE, a tool we have developed for improved sentiment analysis in text especially designed for application in the software engineering domain.Using a benchmark dataset consisting of 5,600 manually annotated JIRA issue comments, we carry out both qualitative and quantitative evaluations of our tool. We also separately evaluate the contributions of individual major components (i.e., domain dictionary and heuristics) of SentiStrength-SE. The empirical evaluations confirm that the domain specificity exploited in our SentiStrength-SE enables it to substantially outperform the existing domain-independent tools/toolkits (SentiStrength, NLTK, and Stanford NLP) in detecting sentiments in software engineering text."
