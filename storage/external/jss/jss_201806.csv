title,abstract
Research article - Efficient graph pattern matching framework for network-based in-vehicle fault detection,"AbstractAbnormal messages propagated from faulty operations in an in-vehicle network may severely harm a vehicular system, but they cannot be easily detected when their information is not known in advance. To support an efficient detection of faulty message patterns propagated in the in-vehicle network, this paper presents a novel graph pattern matching framework built upon a message log-driven graph modeling. Our framework models the unknown operation of the in-vehicle network as a query graph and the reference database of normal operations as data graphs. Given a query graph and data graphs, we determine whether the query graph represents normal or fault operation by using the distance measure on the data graphs. The analysis of the faulty message propagation requires to consider the sequence of events in the distance measure, and thus, using the conventional graph distance measures can generate false negatives due to the lack of consideration of the sequence relationships among the events. We therefore propose a novel distance metric based on the maximum common subgraph (MCS) between two graphs and the sequence numbers of messages, which works robustly even for the abnormal faulty patterns and can avoid false negatives in large databases. Since the problem of MCS computation is NP-hard, we also propose two efficient filtering techniques, one based on the lower bound of the MCS distance for a polynomial-time approximation and the other based on edge pruning. Experiments performed on real and synthetic datasets to assess our framework show that ours significantly outperforms the previously existing methods in terms of both performance and accuracy of query responses."
Research article - A survey of model transformation design patterns in practice,"AbstractModel transformation design patterns have been proposed by a number of researchers, but their usage appears to be sporadic and sometimes patterns are applied without recognition of the pattern. In this paper we provide a systematic literature review of transformation design pattern applications. We evaluate how widely patterns have been used, and how their use differs in different transformation languages and for different categories of transformation. We identify what benefits appear to arise from the use of patterns, and consider how the application of patterns can be improved. The paper also identifies several new patterns which have not previously been catalogued."
Research article - A truthful combinatorial double auction-based marketplace mechanism for cloud computing,"AbstractDesigning market-based mechanism that benefits both the cloud customer and cloud provider in a cloud market is a fundamental but complex problem. Double auction is one such mechanism to allocate resources that prevents monopoly and is used to design an unbiased optimal market strategy for cloud market. This work proposes a truthful combinatorial double auction mechanism for allocation and pricing of computing resources in cloud. For resource allocation, utilitarian social welfare maximization problem is formulated using Integer Linear Programming (ILP) and a near optimal solution is obtained using Linear Programming based padded method. For payment, truthful and novel schemes are designed for both customers and providers. Moreover, the proposed mechanism is individual rational, computationally tractable, weakly budget-balance and asymptotic efficient. Performance evaluation and comparative study exhibit that the proposed mechanism is effective on various performance metrics such as utilitarian social welfare, total utility, customers’ satisfaction, providers’ revenue and hence is applicable in real cloud environments."
Research article - The relation between developers’ communication and fix-Inducing changes: An empirical study,"AbstractBackground Many open source and industrial projects involve several developers spread around the world and working in different timezones. Such developers usually communicate through mailing lists, issue tracking systems or chats. Lack of adequate communication can create misunderstanding and could possibly cause the introduction of bugs.Aim This paper aims at investigating the relation between the bug inducing and fixing phenomenon and the lack of written communication between committers in open source projects.Method We performed an empirical study that involved four open source projects, namely Apache httpd, GNU GCC, Mozilla Firefox, and Xorg Xserver. For each project change history data, issue tracker comments, mailing list messages, and chat logs were analyzed in order to answer four research questions about the relation between the social importance and communication level of committers and their proneness to induce bug fixes.Results and implications Results indicate that the majority of bugs are fixed by committers who did not induce them, a smaller but substantial percentage of bugs is fixed by committers that induced them, and very few bugs are fixed by committers that were not directly involved in previous changes on the same files of the fix. More importantly, committers inducing fixes tend to have a lower level of communication between each other than that of other committers. This last finding suggests that increasing the level of communication between fix-inducing committers could reduce the number of fixes induced in a software project."
Research article - AppSpear: Automating the hidden-code extraction and reassembling of packed android malware,"AbstractCode packing is one of the most frequently used protection techniques for malware to evade detection. Particularly, Android packers originally designed to protect intellectual property are widely utilized by Android malware nowadays to hide their malicious behaviors. What’s worse, Android code packing techniques are evolving rapidly with new features of Android system (e.g., the use of new Android runtime). Meanwhile, unpacking techniques and tools generally do not respond to the evolving of packers immediately, which weakens the effectiveness of new malware detection.To address the unpacking challenge especially for Android packers with advanced code hiding strategies, in this paper we propose AppSpear, an automated unpacking system for both Dalvik and ART. AppSpear adopts a universal unpacking strategy that combines runtime instrumentation, interpreter-enforced execution, and executable reassembling to guarantee the hidden code is extracted and reconstructed as a complete executable. Our experimental evaluation with 530 packed samples shows that AppSpear is able to unpack protected code generated by latest versions of mainstream Android packers effectively."
Research article - What happens when software developers are (un)happy,"AbstractThe growing literature on affect among software developers mostly reports on the linkage between happiness, software quality, and developer productivity. Understanding happiness and unhappiness in all its components – positive and negative emotions and moods – is an attractive and important endeavor. Scholars in industrial and organizational psychology have suggested that understanding happiness and unhappiness could lead to cost-effective ways of enhancing working conditions, job performance, and to limiting the occurrence of psychological disorders. Our comprehension of the consequences of (un)happiness among developers is still too shallow, being mainly expressed in terms of development productivity and software quality. In this paper, we study what happens when developers are happy and unhappy while developing software. Qualitative data analysis of responses given by 317 questionnaire participants identified 42 consequences of unhappiness and 32 of happiness. We found consequences of happiness and unhappiness that are beneficial and detrimental for developers’ mental well-being, the software development process, and the produced artifacts. Our classification scheme, available as open data enables new happiness research opportunities of cause-effect type, and it can act as a guideline for practitioners for identifying damaging effects of unhappiness and for fostering happiness on the job."
Research article - Measuring object-oriented design principles: The results of focus group-based research,"AbstractObject-oriented design principles are fundamental concepts that carry important design knowledge and foster the development of software-intensive systems with a focus on good design quality. They emerged after the first steps in the field of object-oriented programming and the recognition of best practices in using this programming paradigm to build maintainable software. Although design principles are known by software developers, it is difficult to apply them in practice without concrete rules to follow. We recognized this gap and systematically derived design best practices for a number of design principles and provide tool support for automatic measurement of these practices. The aim of this paper is to examine the relationship between design best practices and 10 selected design principles. This should provide evidence whether the key design aspects of the design principles are covered. We conducted focus group research with six focus groups and 31 participants in total. In parallel, each group discussed five design principles and assessed the coverage by using the Delphi method. Despite suggestions of additional design practices that were added by the participants, the result reveals the impact of each design best practice to the design principle and shows that the main design aspects of the design principles are covered by our approach and is therefore feasible to derive concrete design improvement actions."
