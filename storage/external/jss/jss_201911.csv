title,abstract
Research article - The Moitree middleware for distributed mobile-cloud computing,"AbstractCommonly, mobile cloud computing assumes that each mobile device of a user is paired with a user-controlled surrogate in the cloud to overcome resource limitations on mobiles. Our Avatar platform leverages this model to support efficient distributed computing over mobile devices. An avatar is a per-user, always-on software entity that resides in the cloud and acts as the surrogate of the mobile. Mobile-avatar pairs participate in distributed computing as a unified computing entity in such a way that the workload and the demand for resources on the mobiles remain low. This paper presents Moitree, the middleware of the Avatar platform, which provides a common programming and execution framework for mobile distributed apps. Moitree allows the components of a distributed app to execute seamlessly over a set of mobile-avatar pairs, with the provision of offloading computation and communication to the cloud. The programming framework has two key features: user collaborations are modeled using context-aware group semantics - groups are created dynamically based on context; data communication among group members is offloaded to the cloud through high-level communication channels. A prototype of Moitree, along with several apps, has been implemented and evaluated on Android devices and on a cloud running Android x86 avatars."
Research article - An approach to solving non-linear real constraints for symbolic execution,"AbstractConstraint solvers are well-known tools for solving many real-world problems such as theorem proving and real-time scheduling. One of the domains that strongly relies on constraint solvers is the technique of symbolic execution for automatic test data generation. Many researchers have tried to alleviate the shortcomings of the available constraint solvers to improve their applications in symbolic execution for test data generation. Despite many recent improvements, constraint solvers are still unable to efficiently deal with certain types of constraints. In particular, constraints that include non-linear real arithmetic are among the most challenging ones. In this paper, we propose a new approach to solving non-linear real constraints for symbolic execution. This approach emphasizes transforming constraints into functions with specific properties, which are named Satisfaction Functions. A satisfaction function is generated in a way that by maximizing it, values that satisfy the corresponding constraint are obtained. We compared the performance of our technique with three constraint solvers that were known to be able to solve non-linear real constraints. The comparison was made regarding the speed and correctness criteria. The results showed that our technique was comparable with other methods regarding the speed criterion and outperformed these methods regarding the correctness criterion."
Research article - A systematic literature review of techniques and metrics to reduce the cost of mutation testing,"AbstractHistorically, researchers have proposed and applied many techniques to reduce the cost of mutation testing. It has become difficult to find all techniques and to understand the cost-benefit tradeoffs among them, which is critical to transitioning this technology to practice. This paper extends a prior workshop paper to summarize and analyze the current knowledge about reducing the cost of mutation testing through a systematic literature review. We selected 175 peer-reviewed studies, from which 153 present either original or updated contributions. Our analysis resulted in six main goals for cost reduction and 21 techniques. In the last decade, a growing number of studies explored techniques such as selective mutation, evolutionary algorithms, control-flow analysis, and higher-order mutation. Furthermore, we characterized 18 metrics, with particular interest in the number of mutants to be executed, test cases required, equivalent mutants generated and detected, and mutant execution speedup. We found that cost reduction for mutation is increasingly becoming interdisciplinary, often combining multiple techniques. Additionally, measurements vary even for studies that use the same techniques. Researchers can use our results to find more detailed information about particular techniques, and to design comparable and reproducible experiments."
Research article - On the challenges novice programmers experience in developing IoT systems: A Survey,"AbstractThe co-existence of various kinds of devices, protocols, architectures, and applications make Internet of Things (IoT) systems complex to develop, even for experienced programmers. When novice programmers are learning to implement these systems, they are required to deal with areas in which they do not have a deep knowledge. Furthermore, besides becoming proficient in these areas separately, they should integrate them and build a system whose components are heterogeneous from both software and hardware perspectives.The accurate understanding of the most challenging issues that novices face is fundamental to envision strategies aimed at easing the development of IoT systems. This paper focuses on identifying such issues in terms of software development tasks that novice programmers encounter when working on IoT systems. To this end, a survey was conducted among 40 novice developers that worked in groups developing IoT systems during several years of a university course. Based on their own experiences, individually and as a group, the most challenging development tasks were identified and prioritized over a common architecture, in terms of difficulty level and efforts. In addition, qualitative data about the causes of these issues was collected and analyzed. Finally, the paper offers critical insights and points out possible future work."
Research article - Teamwork behaviors in implementing enterprise systems with multiple projects: Results from Chinese firms,"AbstractEnterprise system (ES) implementations are unique in their scope to encompass information transfer and standardization across an entire organization. The ES has become a ubiquitous software product essential for many organizations. A successful ES implementation requires integrating multiple projects, over a wide time span, led by managers across diverse functions and interests. The single project principles proven useful for the development of less complex systems require an upgrade to account for the need to integrate the activities and outputs of the multiple projects in an ES implementation. In particular, the set of goals must move all projects to deliver the ES scope while expending only the allocated resources available to an organization. Based on the literature of social interdependence theory, we develop a model to examine teamwork behaviors in the context of an ES implementation. Specifically, goal interdependence among the multiple ES projects fosters promotive interteam behaviors of monitoring across ES project teams and ES project team adaptability, which, in turn, lead to higher levels of implementation performance. The model holds true according to data from a sample of key participants in recent ES implementations in small to medium Chinese enterprises. Interdependent goals allow for a degree of functional independence while pursuing goals important to the organization as a whole."
Research article - Exploring the gap between the student expectations and the reality of teamwork in undergraduate software engineering group projects,"AbstractSoftware engineering group projects aim to provide a nurturing environment for learning about teamwork in software engineering. Since social and teamwork issues have been consistently identified as serious problems in such projects, we aim to better understand the breakdown between the expectations teams have at the start of a group project and their experiences at the end of the project. In this paper, we investigate how 35 teams of undergraduate students approach software engineering group project courses, and how their previous experience with collaborative software development matches their expectations for group work. We then analyse the retrospective documents delivered by the same teams at the end of a 27-week software engineering group project course, mirroring the expectations at the start of the project with the realities described by the end of it."
Research article - An automated change impact analysis approach for User Requirements Notation models,"AbstractRequirements and their models often evolve to reflect changing needs, technologies, and regulations. The decision to implement proposed changes to requirements models relies on means to capture and analyze the potential impact of such changes. The User Requirements Notation (URN) is a standardized requirements modeling language that incorporates two complementary views based on Use Case Maps (UCM), for expressing scenarios and processes bound to architectural components, and on the Goal-oriented Requirement Language (GRL), for capturing the goals of actors and their relationships. This paper presents a new Change Impact Analysis (CIA) approach for URN models. Following a proposed change, this approach helps identify potentially impacted URN constructs within the selected GRL/UCM view, as well as throughout other view elements connected with URN links. This URN-oriented CIA approach is implemented as an extension of the jUCMNav modeling environment, and its applicability is demonstrated using an illustrative URN specification and three real and publicly available specifications. Furthermore, an empirical study involving 10 participants is used to assess the accuracy of this approach in identifying impacted URN elements upon specification changes. Results indicate excellent accuracy and a significant reduction in user-perceived difficulty when estimating the impact of changes in URN specifications."
Research article - A snowballing literature study on test amplification,"AbstractThe adoption of agile approaches has put an increased emphasis on testing, resulting in extensive test suites. These suites include a large number of tests, in which developers embed knowledge about meaningful input data and expected properties as oracles. This article surveys works that exploit this knowledge to enhance manually written tests with respect to an engineering goal (e.g., improve coverage or refine fault localization). While these works rely on various techniques and address various goals, we believe they form an emerging and coherent field of research, which we coin “test amplification”. We devised a first set of papers from DBLP, searching for all papers containing “test” and “amplification” in their title. We reviewed the 70 papers in this set and selected the 4 papers that fit the definition of test amplification. We use them as the seeds for our snowballing study, and systematically followed the citation graph. This study is the first that draws a comprehensive picture of the different engineering goals proposed in the literature for test amplification. We believe that this survey will help researchers and practitioners entering this new field to understand more quickly and more deeply the intuitions, concepts and techniques used for test amplification."
Research article - Leveraging creativity in requirements elicitation within agile software development: A systematic literature review,"AbstractAgile approaches tend to focus solely on scoping and simplicity rather than on problem solving and discovery. This hampers the development of innovative solutions. Additionally, little has been said about how to capture and represent the real user needs. To fill this gap, some authors argue in favor of the application of “Creative thinking” for requirements elicitation within agile software development. This synergy between creativeness and agility has arisen as a new means of bringing innovation and flexibility to increasingly demanding software.The aim of the present study is therefore to employ a systematic review to investigate the state-of-the-art of those approaches that leverage creativity in requirements elicitation within Agile Software Development, as well as the benefits, limitations and strength of evidence of these approaches.The review was carried out by following the guidelines proposed by Dr. Kitchenham. The search strategy identified 1451 studies, 17 of which were eventually classified as primary studies. The selected studies contained 13 different and unique proposals. These approaches provide evidence that enhanced creativity in requirements elicitation can be successfully implemented in real software projects. We specifically observed that projects related to user interface development, such as those for mobile or web applications, are good candidates for the use of these approaches. We have also found that agile methodologies such as Scrum, Extreme Programming or methodologies based on rapid modelling are preferred when introducing creativity into requirements elicitation. Despite this being a new research field, there is a mixture of techniques, tools and processes that have already been and are currently being successfully tested in industry. Finally, we have found that, although creativity is an important ingredient with which to bring about innovation, it is not always sufficient to generate new requirements because this needs to be followed by user engagement and a specific context in which proper conditions, such as flexibility, time or resources, have to be met."
Research article - How does object-oriented code refactoring influence software quality? Research landscape and challenges,"AbstractContextSoftware refactoring aims to improve software quality and developer productivity. Numerous empirical studies investigating the impact of refactoring activities on software quality have been conducted over the last two decades.ObjectiveThis study aims to perform a comprehensive systematic mapping study of existing empirical studies on evaluation of the effect of object-oriented code refactoring activities on software quality attributes.MethodWe followed a multi-stage scrutinizing process to select 142 primary studies published till December 2017. The selected primary studies were further classified based on several aspects to answer the research questions defined for this work. In addition, we applied vote-counting approach to combine the empirical results and their analysis reported in primary studies.ResultsThe findings indicate that studies conducted in academic settings found more positive impact of refactoring on software quality than studies performed in industries. In general, refactoring activities caused all quality attributes to improve or degrade except for cohesion, complexity, inheritance, fault-proneness and power consumption attributes. Furthermore, individual refactoring activities have variable effects on most quality attributes explored in primary studies, indicating that refactoring does not always improve all quality attributes.ConclusionsThis study points out several open issues which require further investigation, e.g., lack of industrial validation, lesser coverage of refactoring activities, limited tool support, etc."
Research article - Cooperative Thinking: Analyzing a new framework for software engineering education,"AbstractComputational Thinking (CT) and Agile Values (AV) focus respectively on the individual capability to think algorithmically, and on the principles of collaborative software development. Although these two dimensions of software engineering education complement each other, very few studies explored their interaction. In this paper we use an exploratory Structural Equation Modeling technique to introduce and analyze Cooperative Thinking (CooT), a model of team-based computational problem solving. We ground our model on the existing literature and validate it through Partial Least Square modeling. Cooperative Thinking is new competence which aim is to support cooperative problem solving of technical contents suitable to deal with complex software engineering problems. This article suggests to tackle the CooT construct as an education goal, to train students of software development to improve both their individual and teaming performances."
Research article - A dataflow-driven approach to identifying microservices from monolithic applications,"AbstractMicroservices architecture emphasizes employing multiple small-scale and independently deployable microservices, rather than encapsulating all function capabilities into one monolith. Correspondingly, microservice-oriented decomposition, which has been identified to be an extremely challenging task, plays a crucial and prerequisite role in developing microservice-based systems. To address the challenges in such a task, we propose a dataflow-driven semi-automatic decomposition approach. In particular, a four-step decomposition procedure is defined: (1) conduct the business requirement analysis to generate use case and business logic specification; (2) construct the fine-grained Data Flow Diagrams (DFD) and the process-datastore version of DFD (DFDPS) representing the business logics; (3) extract the dependencies between processes and datastores into decomposable sentence sets; and (4) identify candidate microservices by clustering processes and their closely related datastores into individual modules from the decomposable sentence sets. To validate this microservice-oriented decomposition approach, we performed a case study on Cargo Tracking System that is a typical case decomposed by other microservices identification methods (Service Cutter and API Analysis), and made comparisons in terms of specific coupling and cohesion metrics. The results show that the proposed dataflow-driven decomposition approach can recommend microservice candidates with sound coupling and cohesion through a rigorous and easy-to-operate implementation with semi-automatic support."
Research article - Action-Oriented Programming Model: Collective Executions and Interactions in the Fog,"AbstractToday’s dominant design for the Internet of Things (IoT) is a Cloud-based system, where devices transfer their data to a back-end and in return receive instructions on how to act. This view is challenged when delays caused by communication with the back-end become an obstacle for IoT applications with, for example, stringent timing constraints. In contrast, Fog Computing approaches, where devices communicate and orchestrate their operations collectively and closer to the origin of data, lack adequate tools for programming secure interactions between humans and their proximate devices at the network edge. This paper fills the gap by applying Action-Oriented Programming (AcOP) model for this task. While originally the AcOP model was proposed for Cloud-based infrastructures, presently it is re-designed around the notion of coalescence and disintegration, which enable the devices to collectively and autonomously execute their operations in the Fog by serving humans in a peer-to-peer fashion. The Cloud’s role has been minimized—it is being leveraged as a development and deployment platform."
Research article - Enhancing C/C++ based OSS development and discoverability with CBRJS: A Rust/Node.js/WebAssembly framework for repackaging legacy codebases,"AbstractSince the appearance of the C programming language and later C++, a plethora of libraries have been developed in both languages. Unfortunately, discovering such Open Source Software (OSS) components efficiently is not always an easy task. Nonetheless, recent advancements in OSS technologies present an opportunity to improve the status quo. In this paper, we introduce a prototype framework, which utilizes the Rust and JavaScript programming languages, as well as their respective ecosystems, alongside the WebAssembly state-of-the-art Web standard, for achieving boosted exposure for hard-to-find C/C++ OSS components, by taking advantage of their package discovery and delivery channels. By demonstrating how this system works, we show that this methodology is capable of increasing the exposure of such libraries, and providing a modernized stage for further development and maintenance. Provided metrics exhibit a more than twofold increase in downloads for a re-packaged library, superior discoverability compared to standard public OSS code repositories, as well as evidence that Web browser vendors invest heavily in optimizing the underlying runtime."
"Research article - Adopting DevOps in the real world: A theory, a model, and a case study","AbstractDevOps is a set of practices and cultural values that aims to reduce the barriers between development and operations teams. Due to its increasing interest and imprecise definitions, existing research works have tried to characterize DevOps.Nevertheless, little is known about the practitioners’ understandingabout successful paths for DevOps adoption. Therefore, our goal is to detail real scenarios of DevOps adoption, presenting a theory, a model, and a case study.We used classic Grounded Theory to build a theory about 15 scenarios of successful DevOps adoption in companies from different domains and countries. We proposed a model (i.e., a workflow for DevOps adoption) and evaluated it through a case study at a Brazilian Government institution. We used a focus group to collect the company perceptions about DevOps adoption.This paper increments the existing view of DevOps by detailing real scenarios and explaining the role of each category during DevOps adoption. We provide evidence that collaboration is the core DevOps concern, contrasting with an existing wisdom that automation and tooling can be enough to achieve DevOps.Altogether, our results contribute to: generating an adequate understanding of DevOps, from the practitioners’ perspective; and assisting other institutions in the path towards DevOps adoption."
