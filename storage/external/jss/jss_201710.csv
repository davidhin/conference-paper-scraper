title,abstract
Research article - Towards a standardized cloud service description based on USDL,"AbstractIn recent years, cloud computing paradigm has attracted a lot of attention from both industry and academia. However, each cloud provider uses its own techniques (languages, standards, ontologies, or models, etc.) to describe cloud services. The diversity of these techniques leads to the vendor lock-in problem, and thus, the lack of a cloud service description standardization. In addition, existing service descriptions cover only particular aspects and neglect others. For example, WSDL covers only technical aspect and does not cover business and semantic ones. Our objective is to define a standardized cloud service description that covers technical, operational, business, and semantic aspects. In this paper, we introduce different approaches that have dealt with cloud service description, and thus, we adopt USDL language as an appropriate technique to describe cloud services thanks to its expressivity by covering three perspectives (technical, operational, and business). But, USDL is still limited because it cannot cover semantic aspect and it is not intended for cloud computing domain. After that, we highlight USDL limitations that can appear in cloud computing domain and that should be taken into consideration in our research work. This paper will focus on establishing a WSMO-based ontology to define semantically cloud services. This new cloud service description is based on USDL and we will enhance it by taking into consideration some USDL limitations. Finally, we test our proposed cloud service description model on a case study to prove its applicability."
Research article - A framework for gamification in software engineering,"AbstractGamification seeks for improvement of the user's engagement, motivation, and performance when carrying out a certain task; it does so by incorporating game mechanics and elements, thus making that task more attractive. The application of gamification in Software Engineering can be promising; software projects can be organized as a set of challenges which can be ordered and that need to be fulfilled, for which some skills, and mainly much collective effort, are required. The objective of this paper is to propose a complete framework for the introduction of gamification in software engineering environments. This framework is composed of an ontology, a methodology guiding the process, and a support gamification engine. We carried out a case study in which the proposed framework was applied in a real company. In this project the company used the framework to gamify the areas of project management, requirements management, and testing. As a result, the methodology has clearly enabled the company to introduce gamification in its work environment, achieving a quality solution with appropriate design and development effort. The support tool allowed the company to gamify its current tools very easily."
Research article - A PSO-GA approach targeting fault-prone software modules,AbstractWe present an algorithm to classify software modules as fault-prone or not using object-oriented metrics. Our algorithm is a combination of particle swarm intelligence and genetic algorithms. We empirically validate it on eight different data sets. We also compare it to well known classification techniques. Results show that our algorithm has several advantages over other techniques.
Research article - Modeling and automatic code generation for wireless sensor network applications using model-driven or business process approaches: A systematic mapping study,"AbstractThis systematic mapping study investigates the modeling and automatic code generation initiatives for wireless sensor network applications based on the IEEE 802.15.4 standard, trying to understand the reasons, characteristics and methods used in the approaches available in the scientific literature, identifying research gaps and potential approaches that can be better exploited, indicating new possibilities of research. The focus is on studies that follow the Model-Driven or Business Process approaches."
Research article - Environmental factors analysis and comparison affecting software reliability in development of multi-release software,"AbstractAs the application of the principles of agile and lean software development, software multiple release becomes very common in the modern society. Short iteration and short release cycle have driven the significant changes of the development process of multi-release software product, compared with single release software product. Thus, it is time to conduct a new study investigating the impact level of environmental factors on affecting software reliability in the development of multi-release software to provide a sound and concise guidance to software practitioners and researchers. Statistical learning methods, like principle component analysis, stepwise backward elimination, lasso regression, multiple linear regression, and Tukey method, are applied in this study. Comparisons regarding significant environmental factors during the whole development process, principle components, significant environmental factors in each development phase and significance level of each development phase between the development of single release software and multi-release software are also discussed."
Research article - Patterns of developers behaviour: A 1000-hour industrial study,"AbstractMonitoring developers’ activity in the Integrated Development Environment (IDE) and, in general, in their working environment, can be useful to provide context to recommender systems, and, in perspective, to develop smarter IDEs. This paper reports results of a long (about 1000 h) observational study conducted in an industrial environment, in which we captured developers’ interaction with the IDE, with various applications available in their workstation, and related them with activities performed on source code files. Specifically, the study involved six developers working on three software systems and investigated (i) how much time developers spent on various activities and how they shift from one activity to another (ii) how developers navigate through the software architecture during their task, and (iii) how the complexity and readability of source code may trigger further actions, such as requests for help or browsing/changing other files. Results of our study suggest that: (i) not surprisingly, developers spend most or their time (∼ 61%) in development activities while the usage of online help is limited (2%) but intensive in specific development sessions; (ii) developers often execute the system under development after working on code, likely to verify the effect of applied changes on the system’s behaviour; (iii) while working on files having a high complexity, developers tend to more frequently execute the system as well as to use more online help websites."
Research article - Resource management in cloud platform as a service systems: Analysis and opportunities,"AbstractPlatform-as-a-Service (PaaS) clouds offer services to automate the deployment and management of applications, relieving application owners of the complexity of managing the underlying infrastructure resources. However, application owners have an increasingly larger diversity and volume of workloads, which they want to execute at minimum cost while maintaining desired performance guarantees. In this paper we investigate how existing PaaS systems cope with this challenge. In particular, we first present a taxonomy of commonly-encountered design decisions regarding how PaaS systems manage underlying resources. We then use this taxonomy to analyze an extensive set of PaaS systems targeting different application domains. Based on this analysis, we identify several future research opportunities in the PaaS design space, which will enable PaaS owners to reduce hosting costs while coping with the workload variety."
"Research article - Evolution of the R software ecosystem: Metrics, relationships, and their impact on qualities","AbstractSoftware ecosystems are an important new concept for collaborative software development, and empirical studies on their development are important towards understanding the underlying dynamics and modelling their behaviour. We conducted an explorative analysis of the R ecosystem as an exemplar on high-level, ecosystem-wide assessment. Based principally on the documentation metadata of the R packages, we generated a variety of metrics that allow the quantification of the R ecosystem. We also categorized the ecosystem participants, both in the software marketplace and in the developer community, by characteristics that measure their activity and impact. By viewing our metrics across the ecosystem’s lifecycle for the various participant categories, we discovered interrelationships between them and determined the contribution of each category to the ecosystem as a whole."
Research article - A statistical analysis approach to predict user's changing requirements for software service evolution,"AbstractEvolution is inevitable for almost all software, and may be driven by users’ continuous requests for changes and improvement, the enablement of technology development, among other factors. The evolution of software services can be seen as the evolution of system-user interactions. The capability to accurately and efficiently observe users’ volatile requirements is critical to making timely system improvements to adapt to rapidly changing environments. In this paper, we propose a methodology that employs Conditional Random Fields (CRF) as a means to provide quantitative exploration of system-user interactions that often lead to the discovery of users’ potential needs and requirements. By analyzing users' run-time behavioral patterns, domain experts can make prompt predictions on how users’ intentions shift, and timely propose system improvements or remedies to help address emerging needs. Our ultimate research goal is to speed up software service evolution to a great extent with automated tools, knowing that the challenge can be undoubtedly steep. The evolution of an online research library service is used to illustrate and evaluate the proposed approach in detail."
Research article - Efficient query processing on large spatial databases: A performance study,"AbstractProcessing of spatial queries has been studied extensively in the literature. In most cases, it is accomplished by indexing spatial data using spatial access methods. Spatial indexes, such as those based on the Quadtree, are important in spatial databases for efficient execution of queries involving spatial constraints and objects. In this paper, we study a recent balanced disk-based index structure for point data, called xBR+-tree, that belongs to the Quadtree family and hierarchically decomposes space in a regular manner. For the most common spatial queries, like Point Location, Window, Distance Range, Nearest Neighbor and Distance-based Join, the R-tree family is a very popular choice of spatial index, due to its excellent query performance. For this reason, we compare the performance of the xBR+-tree with respect to the R*-tree and the R+-tree for tree building and processing the most studied spatial queries. To perform this comparison, we utilize existing algorithms and present new ones. We demonstrate through extensive experimental performance results (I/O efficiency and execution time), based on medium and large real and synthetic datasets, that the xBR+-tree is a big winner in execution time in all cases and a winner in I/O in most cases."
Research article -  Quality of service approaches in IoT: A systematic mapping,"AbstractIn an Internet of Things (IoT) environment, the existence of a huge number of heterogeneous devices, which are potentially resource-constrained and/or mobile has led to quality of service (QoS) concerns. Quality approaches have been proposed at various layers of the IoT architecture and take into consideration a number of different QoS factors. This paper evaluates the current state of the art of proposed QoS approaches in the IoT, specifically: (1) What layers of the IoT architecture have had the most research on QoS? (2) What quality factors do the quality approaches take into account when measuring performance? (3) What types of research have been conducted in this area? We have conducted a systematic mapping using a number of automated searches from the most relevant academic databases to address these questions. This mapping has identified a number of state of the art approaches which provides a good reference for researchers. The paper also identifies a number of gaps in the research literature at specific layers of the IoT architecture. It identifies which quality factors, research and contribution facets have been underutilised in the state of the art."
Research article - Scalable model exploration for model-driven engineering,"AbstractModel-Driven Engineering (MDE) promotes the use of models to conduct all phases of software development in an automated way. However, for complex systems, these models may become large and unwieldy, and hence difficult to process and comprehend.In order to alleviate this situation, we combine model fragmentation strategies – to split models into more manageable chunks – with model abstraction and visualisation mechanisms, able to provide simpler views of the models. In this paper, we describe the underlying methods and techniques, as well as the supporting tools. The feasibility and benefits of our approach are confirmed based on evaluations in the embedded systems, and the reverse engineering domains, where large benefits in terms of visualisation time (speeds up of up to 55 × ), and reduction in memory consumption (reduction of 97%) are obtained."
Research article - Cross-validation based K nearest neighbor imputation for software quality datasets: An empirical study,"AbstractBeing able to predict software quality is essential, but also it pose significant challenges in software engineering. Historical software project datasets are often being utilized together with various machine learning algorithms for fault-proneness classification. Unfortunately, the missing values in datasets have negative impacts on the estimation accuracy and therefore, could lead to inconsistent results. As a method handling missing data, K nearest neighbor (KNN) imputation gradually gains acceptance in empirical studies by its exemplary performance and simplicity. To date, researchers still call for optimized parameter setting for KNN imputation to further improve its performance. In the work, we develop a novel incomplete-instance based KNN imputation technique, which utilizes a cross-validation scheme to optimize the parameters for each missing value. An experimental assessment is conducted on eight quality datasets under various missingness scenarios. The study also compared the proposed imputation approach with mean imputation and other three KNN imputation approaches. The results show that our proposed approach is superior to others in general. The relatively optimal fixed parameter settings for KNN imputation for software quality data is also determined. It is observed that the classification accuracy is improved or at least maintained by using our approach for missing data imputation."
Research article - Taxonomy of workflow partitioning problems and methods in distributed environments,"AbstractA workflow model is the computerized representation of a business or scientific process. It defines the starting and ending conditions of the process, the activities in the process, control flow and data flow among these activities, etc. A partitioning method creates workflow fragments that group some of the workflow model elements (activities, control flows, data flows). Workflow partitioning forms the foundation of decentralised workflow execution and increases scalability, and reuse of partitions. In the literature, different methods have been presented for workflow partitioning and offer a variety of execution approaches; however, there is no existing comprehensive survey and taxonomy of workflow partitioning methods. This article presents an overview of taxonomies characterizing the key concepts of the workflow life cycle and workflow partitioning methods through a comprehensive survey of business and scientific domains in decentralised environments. This in-depth analysis of taxonomies can provide researchers, designers and applications developers with clear guideline to compare current workflow partitioning methods to choose, reuse and compose more vigorous approaches. The article further presents research discussions and future challenges in this area."
Research article - Adaptive Ensemble Undersampling-Boost: A novel learning framework for imbalanced data,"AbstractAs one of the most challenging and attractive problems in the pattern recognition and machine intelligence field, imbalanced classification has received a large amount of research attention for many years. In binary classification tasks, one class usually tends to be underrepresented when it consists of far fewer patterns than the other class, which results in undesirable classification results, especially for the minority class. Several techniques, including resampling, boosting and cost-sensitive methods have been proposed to alleviate this problem. Recently, some ensemble methods that focus on combining individual techniques to obtain better performance have been observed to present better classification performance on the minority class. In this paper, we propose a novel ensemble framework called Adaptive Ensemble Undersampling-Boost for imbalanced learning. Our proposal combines the Ensemble of Undersampling (EUS) technique, Real Adaboost, cost-sensitive weight modification, and adaptive boundary decision strategy to build a hybrid algorithm. The superiority of our method over other state-of-the-art ensemble methods is demonstrated by experiments on 18 real world data sets with various data distributions and different imbalance ratios. Given the experimental results and further analysis, our proposal is proven to be a promising alternative that can be applied to various imbalanced classification domains."
Research article - Ontology-based recommender system for COTS components,"AbstractCommercial Off-The-Shelf (COTS) components are coarse-grained software components that satisfy high-level requirements by integrating several services and offering several interfaces. They are usually used to build larger systems. The paper proposes an ontology-based recommender system for COTS components, that contributes to COTS-based development by improving COTS components identification. It combines into a single framework information retrieval technologies and knowledge about COTS components and users in order to provide the most relevant COTS components meeting users needs. The recommender system is based on (1) an ontology of COTS components, named ONTOCOTS, that describes COTS components and unifies their heterogeneous descriptions available on the Web, and (2) a user model that represents user preferences and interest domains. The proposed recommender system is broken down on two main processes. The first one is responsible for extracting information about COTS components from COTS repositories and representing it as ONTOCOTS instances. The second one is the recommendation process during which the user query is expanded using the linguistic ontology WordNet, and is used along with the user profile and the domain ontology ODP (Open Directory Project) to generate a formal query. Results list is ranked according to the satisfaction degree of user requirements and preferences. Experimentations show an amelioration in recommendations relevance by placing the relevant COTS components at the top of the recommendation list."
Research article - Refining a model for sustained usage of agile methodologies,"AbstractThis paper refines a model of Sustained Agile Usage to present a comprehensive understanding of the key factors that are pertinent to the sustained usage of agile methodologies. It describes our qualitative study which involves: (i) a focus group with twenty-nine software industry agile practitioners, and (ii) semi-structured interviews with twenty agile practitioners from five different organizational backgrounds. Data from both methods is used to develop the refined model of Sustained Agile Usage. The refined Sustained Agile Usage Model includes the following three categories: Agile Team Factors, Technological Factors, and Organizational Factors. These revisions are discussed in this research. Finally, we see implications for research: the study offers a useful complement to the few studies that have examined the long-term acceptance of agile methods. The refined model can be used as a reference model to guide future studies to understand sustained usage in different agile domains (e.g. Kanban). Additionally, implications for practice include valuable insights that can help agile teams and others (e.g. top management) to better understand and benchmark how agile methods can be effectively sustained in organizations."
Research article - Implementation relations and probabilistic schedulers in the distributed test architecture,"AbstractWe present a complete framework to formally test systems with distributed ports where some choices are probabilistically quantified while other choices are non-deterministic. We define different implementation relations, that is, relations that state what it means for a system to be a valid implementation of a specification. We also study how these relate. In order to define these implementation relations we use probabilistic schedulers, a more powerful version, including probabilistic choices, of a notion of scheduler introduced in our previous work. Probabilistic schedulers, when applied to either a specification or an implementation, resolve all the possible non-determinism, so that we can compare purely probabilistic systems."
Research article - A method to localize faults in concurrent C programs,"AbstractWe describe a new approach to localize faults in concurrent programs, which is based on bounded model checking and sequentialization techniques. The main novelty is the idea of reproducing a faulty behavior, in a sequential version of a concurrent program. In order to pinpoint faulty lines, we analyze counterexamples generated by a model checker, to the new instrumented sequential program, and search for a diagnostic value, which corresponds to actual lines in a program. This approach is useful to improve debugging processes for concurrent programs, since it tells which line should be corrected and what values lead to a successful execution. We implemented this approach as a code-to-code transformation from concurrent into non-deterministic sequential programs, which are used as inputs to existing verification tools. Experimental results show that our approach is effective and capable of identifying faults in our benchmark set, which was extracted from the SV-COMP 2016 suite."
Research article - Predictive runtime verification of timed properties,"AbstractRuntime verification (RV) techniques are used to continuously check whether the (un-trustworthy) output of a black-box system satisfies or violates a desired property. When we consider runtime verification of timed properties, physical time elapsing between actions influences the satisfiability of the property. This paper introduces predictive runtime verification of timed properties where the system is not entirely a black-box but something about its behaviour is known a priori. A priori knowledge about the behaviour of the system allows the verification monitor to foresee the satisfaction (or violation) of the monitored property. In addition to providing a conclusive verdict earlier, the verification monitor also provides additional information such as the minimum (maximum) time when the property can be violated (satisfied) in the future. The feasibility of the proposed approach is demonstrated by a prototype implementation, which is able to synthesize predictive runtime verification monitors from timed automata."
Research article - A feature matching and transfer approach for cross-company defect prediction,"AbstractSoftware defect prediction has drawn much attention of researchers in software engineering. Traditional defect prediction methods aim to build the prediction model based on historical data. For a new project or a project with limited historical data, we cannot build a good prediction model. Therefore, researchers have proposed the cross-project defect prediction (CPDP) and cross-company defect prediction (CCDP) methods to share the historical data among different projects. However, the features of cross-company datasets are often heterogeneous, which may affect the feasibility of CCDP. To address the heterogeneous features of CCDP, this paper presents a feature matching and transfer (FMT) approach. First, we conduct feature selection for the source project and get the distribution curves of selected features. Similarly, we also get the distribution curves of all features in the target project. Second, according to the ‘distance’ of different distribution curves, we design a feature matching algorithm to convert the heterogeneous features into the matched features. Finally, we can achieve feature transfer from the source project to the target project. All experiments are conducted on 16 datasets from NASA and PROMISE, and the results show that FMT is effective for CCDP."
