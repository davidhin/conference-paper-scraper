title,abstract
Short communication - An idiom to represent data types in Alloy,"AbstractContext: It is common to consider Alloy signatures or UML classes as data types that have a canonical fixed interpretation: the elements of the type correspond to terms recursively generated by the type constructors. However, these language constructs resemble data types but, strictly, they are not.Objective: In this article, we propose an idiom to specify data types in Alloy.Method: We compare our approach to others in the context of checking data refinement using the Alloy Analyzer tool.Results: Some previous studies do not include the generation axiom and may perform unsound analysis. Other studies recommend some optimizations to overcome a limitation in the Alloy Analyzer tool.Conclusion: The problem is not related to the tool but the way data types must be represented in Alloy. This study shows the importance of using automated analyses to test translation between different language constructs."
"Review article - Problems, causes and solutions when adopting continuous delivery—A systematic literature review","AbstractContext: Continuous delivery is a software development discipline in which software is always kept releasable. The literature contains instructions on how to adopt continuous delivery, but the adoption has been challenging in practice.Objective: In this study, a systematic literature review is conducted to survey the faced problems when adopting continuous delivery. In addition, we identify causes for and solutions to the problems.Method: By searching five major bibliographic databases, we identified 293 articles related to continuous delivery. We selected 30 of them for further analysis based on them containing empirical evidence of adoption of continuous delivery, and focus on practice instead of only tooling. We analyzed the selected articles qualitatively and extracted problems, causes and solutions. The problems and solutions were thematically synthesized into seven themes: build design, system design, integration, testing, release, human and organizational and resource.Results: We identified a total of 40 problems, 28 causal relationships and 29 solutions related to adoption of continuous delivery. Testing and integration problems were reported most often, while the most critical reported problems were related to testing and system design. Causally, system design and testing were most connected to other themes. Solutions in the system design, resource and human and organizational themes had the most significant impact on the other themes. The system design and build design themes had the least reported solutions.Conclusions: When adopting continuous delivery, problems related to system design are common, critical and little studied. The found problems, causes and solutions can be used to solve problems when adopting continuous delivery in practice."
Review article - Analyzing the concept of technical debt in the context of agile software development: A systematic literature review,"AbstractContextTechnical debt (TD) is a metaphor that is used to communicate the consequences of poor software development practices to non-technical stakeholders. In recent years, it has gained significant attention in agile software development (ASD).ObjectiveThe purpose of this study is to analyze and synthesize the state of the art of TD, and its causes, consequences, and management strategies in the context of ASD.Research MethodUsing a systematic literature review (SLR), 38 primary studies, out of 346 studies, were identified and analyzed.ResultsWe found five research areas of interest related to the literature of TD in ASD. Among those areas, “managing TD in ASD” received the highest attention, followed by “architecture in ASD and its relationship with TD”. In addition, eight categories regarding the causes and five categories regarding the consequences of incurring TD in ASD were identified. “Focus on quick delivery” and “architectural and design issues” were the most popular causes of incurring TD in ASD. “Reduced productivity”, “system degradation” and “increased maintenance cost” were identified as significant consequences of incurring TD in ASD. Additionally, we found 12 strategies for managing TD in the context of ASD, out of which “refactoring” and “enhancing the visibility of TD” were the most significant.ConclusionThe results of this study provide a structured synthesis of TD and its management in the context of ASD as well as potential research areas for further investigation."
"Research article - Twenty years of object-relational mapping: A survey on patterns, solutions, and their implications on application design","AbstractContextAlmost twenty years after the first release of TopLink for Java, Object-Relational Mapping Solutions (ORMSs) are available at every popular development platform, providing useful tools for developers to deal with the impedance mismatch problem. However, no matter how ubiquitous these solutions are, this essential problem remains as challenging as ever. Different solutions, each with a particular vocabulary, are difficult to learn, and make the impedance problem looks deceptively simpler than it really is.ObjectiveThe objective of this paper is to identify, discuss, and organize the knowledge concerning ORMSs, helping designers towards making better informed decisions about designing and implementing their models, focusing at the static view of persistence mapping.MethodThis paper presents a survey with nine ORMSs, selected from the top ten development platforms in popularity. Each ORMS was assessed, by documentation review and experience, in relation to architectural and structural patterns, selected from literature, and its characteristics and implementation options, including platform specific particularities.ResultsWe found out that all studied ORMSs followed architectural and structural patterns in the literature, but often with distinct nomenclature, and some singularities. Many decisions, depending on how patterns are implemented and configured, affect how class models should be adapted, in order to create practical mappings to the database.ConclusionThis survey identified what structural patterns each ORMS followed, highlighting major structural decisions a designer must take, and its consequences, in order to turn analysis models into object oriented systems. It also offers a pattern based set of characteristics that developers can use as a baseline to make their own assessments of ORMSs."
Research article - Automated refactoring of super-class method invocations to the Template Method design pattern,"AbstractContext: Implementation inheritance, i.e., overriding of concrete method implementations through subtyping, is prone to potential class contract violations. Call Super is a code pattern that employs implementation inheritance for extending a method’s behaviour. In Call Super the overriding method includes in its body an invocation to the overridden method. Template Method is a design pattern that enables extensions to a multi-step procedure without overriding its concrete implementation. Instead, subclasses provide different variants of the template method’s behaviour through implementation of abstract method definitions (interface inheritance).Objective: This work studies the automated refactoring of Call Super to Template Method, contributing, thus, to replacement of implementation inheritance with interface inheritance.Method: We introduce an algorithm for the discovery of refactoring candidates that is based on an extensive set of refactoring preconditions. Moreover, we specify the source code transformation for refactoring a Call Super instance to Template Method. An implementation of the proposed approach is evaluated on a set of open source Java projects.Results: The evaluation results highlight (a) the frequent occurrence of the Call Super pattern among method overridings, (b) the potential provided by our method for discovery and elimination of several non-trivial Call Super instances and (c) the resulting code improvement, as reflected by the Specialization Index metric and the alignment of refactored code with the programmer’s intent. The application of all refactorings identified on a set of benchmark projects and the successful execution of their test suites provide empirical evidence on the soundness of the refactoring procedure. Runtime performance results support the scalability of the proposed method.Conclusion: The proposed method automates the replacement of implementation inheritance with interface inheritance through refactoring Call Super instances to Template Method. The empirical evaluation of the method supports its applicability, soundness and runtime efficiency."
Research article - Reliability-redundancy-location allocation with maximum reliability and minimum cost using search techniques,"AbstractContextA safety critical system requires an automated and optimal allocation of redundant component instances to its existing components, including: 1) the selection of components (locations) on which the redundancy must be applied, 2) how many redundant component instances of varying reliability and cost should be allocated to each selected location.ObjectiveOur work aims to searching for the near optimal allocation solutions achieving the higher reliability of the system within the allowed cost. Such allocation must be made earlier, for example, while designing the architecture of the system to avoid unnecessary complexity of addressing unsafe situations discovered in the system development and deployment phases.MethodWith the above objective in mind, we propose a search-based allocation approach based on the overall objectives of maximizing the overall system reliability and minimizing the cost of introducing and allocating redundancy structures to the system. The architecture of a system modeled using the Unified Modeling Language (UML) along with redundancy structures is encoded as an optimization problem. To guide a search algorithm to solve the problem, we propose a fitness function based on the two optimization objectives: high reliability and low cost.ResultsWe empirically evaluated the performance of four search algorithms (Genetic Algorithm, (1 + 1) Evolutionary Algorithm, Alternating Variable Method (AVM) and Random Search) together with the proposed fitness function on 10 real-world Subsea Oil&Gas Production Systems of varying complexity. Results show that the AVM algorithm significantly outperforms the rest.ConclusionBased on the results of empirical evaluation, we found that AVM can provide the best allocation of redundancy structures as compared to the rest of the algorithms. On average, AVM provided 0.008% of more reliability while saving 26.78% on allocation cost as compared to RS. Our novel solution based on the results of empirical evaluation is implemented as a software tool."
Research article -  MUSEUM: Debugging real-world multilingual programs using mutation analysis,"AbstractContext: The programming language ecosystem has diversified over the last few decades. Non-trivial programs are likely to be written in more than a single language to take advantage of various control/data abstractions and legacy libraries.Objective: Debugging multilingual bugs is challenging because language interfaces are difficult to use correctly and the scope of fault localization goes beyond language boundaries. To locate the causes of real-world multilingual bugs, this article proposes a mutation-based fault localization technique (MUSEUM).Method: MUSEUM modifies a buggy program systematically with our new mutation operators as well as conventional mutation operators, observes the dynamic behavioral changes in a test suite, and reports suspicious statements. To reduce the analysis cost, MUSEUM selects a subset of mutated programs and test cases.Results: Our empirical evaluation shows that MUSEUM is (i) effective: it identifies the buggy statements as the most suspicious statements for both resolved and unresolved non-trivial bugs in real-world multilingual programming projects; and (ii) efficient: it locates the buggy statements in modest amount of time using multiple machines in parallel. Also, by applying selective mutation analysis (i.e., selecting subsets of mutants and test cases to use), MUSEUM achieves significant speedup with marginal accuracy loss compared to the full mutation analysis.Conclusion: It is concluded that MUSEUM locates real-world multilingual bugs accurately. This result shows that mutation analysis can provide an effective, efficient, and language semantics agnostic analysis on multilingual code. Our light-weight analysis approach would play important roles as programmers write and debug large and complex programs in diverse programming languages."
Research article - Improving modular structure of software system using structural and lexical dependency,"AbstractContextA software system's structure often degrades due to repetitive maintenance. To make a sustainable evolution of such systems, it becomes mandatory to improve their modular structure after a certain time. Many remodularization approaches were proposed to improve the modular structure of software systems. Most of the existing approaches rely on structural or lexical dependencies. However, there is a lack of research that distinguishes different types of structural (e.g., inheritance, method calls, references, etc.) or lexical (Name of classes, methods, variables, etc.) dependencies, but assumes that they are equivalent, which is illogical from a software developer's point of view.ObjectiveIn this paper, we propose an approach that considers various types of structural as well as lexical dependencies along with their relative importance to remodularize the Object-Oriented (OO) systems. The main goal of the paper is to generate remodularization solutions that can reflect the developers' perspective (as visible in the well-modularized software system) of remodularization, which is highly desirable in software evolution.MethodThe paper computes coupling strength among classes using different weights (computed on basis of well-modularized software system) in terms of various mechanisms of structural and lexical dependencies. Software remodularization problem is formulated as a single and multi-objective optimization problem and solved using Genetic Algorithms (GA). Based on the different types of structural and lexical dependencies and as per their un-weighted/weighted variants, we have designed following 24 coupling schemes: structural-based (i.e., SBUW, SBW, SAUW, SAW, STFUW, STFW, STFIDFUW, and STFIDFW), lexical-based (i.e., LBUW, LBW, LAUW, LAW, LTFUW, LTFW, LTFIDFUW, and LTFIDFW), and combined structural-lexical based (i.e., SLBUW, SLBW, SLAUW, SLAW, SLTFUW, SLTFW, SLTFIDFUW, and SLTFIDFW). Values obtained through these coupling schemes are used in coupling and cohesion objective function of the GA. Along with this objective, some supportive objective functions such as MCI and MSI have been used to drive the optimization process towards a good quality modularization solution.ResultsWe assess the effectiveness of our proposed remodularization approach over eight real-world object-oriented software systems in terms of original design of the experimented software systems and modularization decisions provided by the developers. Results indicate that TFIDF based weighted variants (i.e. STFIDFW, LTFIDFW, and SLTFIDFW) of each broad three categories outperformed rest of variants within each category. However, TFIDF weighted variant in the third broad category (i.e., SLTFIDFW) outperformed all others.ConclusionOur combined lexical-structural approach (SLTFIDFW) considering various types of dependencies along with their relative weights performs well and results into better remodularization compared to rest of considered alternates. It also shows significant improvement over techniques based on only lexical or structural information. Thus this approach can be very useful to improve the quality of the software whose remodularization quality deteriorates beyond accepted level."
Research article - Quality attributes and quality models for ambient assisted living software systems: A systematic mapping,"AbstractContext: Ambient Assisted Living (AAL) has become an essential, multidisciplinary research topic, aiming at providing software systems and services that assist people in their everyday life activities. Considering the critical nature of AAL systems, several initiatives have already contributed to the improvement of their quality, by mainly focusing on their non-functional requirements. Despite the importance of quality assurance in AAL systems, there is a lack of a comprehensive analysis on how quality assurance is performed in such systems. This fact might in turn lead to an absence of standardization with regard to the quality assurance process of these systems.Objective: We provide a broad, detailed panorama about the state of the art on quality models (QMs) and quality attributes (QAs) that are important for the AAL domain.Method: We performed a Systematic Mapping (SM). We used six publication databases to cover all published material pertinent for our SM. We initially obtained 287 studies that were filtered based on a set of well-defined inclusion/exclusion criteria, resulting into a set of 27 studies that were used for exploring QAs for AAL systems.Results: The most common QAs used in the development of AAL systems were identified and defined. We also characterized important critical attributes for software systems in the AAL domain. Additionally, QAs for some AAL sub-domains were defined. Furthermore, we investigated how QM&QA have been defined, evaluated, and used in that domain. Finally, we offered an analysis of the maturity of the studies identified in our SM.Conclusion: It is necessary to develop a complete QM that: (i) defines all common QAs for AAL systems; (ii) considers variability of QAs among AAL sub-domains; (iii) analyses dependences among QAs; (iv) offers indicators or metrics to measure QAs; and (v) offers means to assess and predict quality of AAL systems."
Research article - Assessing the influence of feedback-inclusive rapid prototyping on understanding the semantics of parallel UML statecharts by novice modellers,"AbstractContextUML diagrams are the de facto standard for analysing, communicating and designing software systems, as well as automated code generation. However there is a certain degree of difficulty in understanding a system represented by means of UML diagrams.ObjectOur previous research demonstrates a significant improvement in understanding the structural aspects of a system represented as a UML class diagram when using a feedback-inclusive prototype of a model. This paper extends our previous work with an empirical validation study for the effectiveness of the feedback-inclusive rapid prototyping (FIRP) method, on the comprehension of system dynamics represented as multiple interacting UML statecharts. Because models often combine structural and behavioural views that are highly intertwined, we additionally evaluate the effectiveness of the proposed method with respect to comprehension of the between-view consistency.MethodThe FIRP environment was built following the principles of Design Science Research in Information Systems. This study targets the empirical validation of the effectiveness of the proposed technique using an experimental study method. Two experiments were conducted with the participation of 65 final-year master students in the context of different modelling courses from different study programs at KU Leuven using two two-group factorial experimental designs. The effectiveness of the FIRP method was measured by comparing students’ performance between the cycles with and without the use of the method, using the understandability (comprehension test results) as the dependent variable and the use of FIRP as the independent variable. Effects from unknown variables were neutralized by means of randomized group compositions. The effectiveness of FIRP was additionally assessed with respect to personal characteristics (age, gender, previous knowledge, self-efficacy) and user acceptance (perceived ease of use, perceived utility, preference, satisfaction).ResultsThe findings reveal a significant positive impact of the use of the prototyping technique on students’ comprehension of system dynamics represented as multiple interacting statecharts.ConclusionsThe findings provide empirical support for the advantage of the use of FIRP over manual inspection of interacting statecharts. The findings also suggest that the method is suitable for training system's analysis and modelling skills when UML statecharts are involved."
Research article - Improved bug localization based on code change histories and bug reports,"AbstractContextSeveral issues or defects in released software during the maintenance phase are reported to the development team. It is costly and time-consuming for developers to precisely localize bugs. Bug reports and the code change history are frequently used and provide information for identifying fault locations during the software maintenance phase.ObjectiveIt is difficult to standardize the style of bug reports written in natural languages to improve the accuracy of bug localization. The objective of this paper is to propose an effective information retrieval-based bug localization method to find suspicious files and methods for resolving bugs.MethodIn this paper, we propose a novel information retrieval-based bug localization approach, termed Bug Localization using Integrated Analysis (BLIA). Our proposed BLIA integrates analyzed data by utilizing texts, stack traces and comments in bug reports, structured information of source files, and the source code change history. We improved the granularity of bug localization from the file level to the method level by extending previous bug repository data.ResultsWe evaluated the effectiveness of our approach based on experiments using three open-source projects, namely AspectJ, SWT, and ZXing. In terms of the mean average precision, on average our approach improves the metric of BugLocator, BLUiR, BRTracer, AmaLgam and the preliminary version of BLIA by 54%, 42%, 30%, 25% and 15%, respectively, at the file level of bug localization.ConclusionCompared with prior tools, the results showed that BLIA outperforms these other methods. We analyzed the influence of each score of BLIA from various combinations based on the analyzed information. Our proposed enhancement significantly improved the accuracy. To improve the granularity level of bug localization, a new approach at the method level is proposed and its potential is evaluated."
