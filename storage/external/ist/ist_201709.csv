title,abstract
Research article - Automated triaging of very large bug repositories,"AbstractContext: Bug tracking systems play an important role in software maintenance. They allow both developers and users to submit problem reports on observed failures. However, by allowing anyone to submit problem reports, it is likely that more than one reporter will report on the same issue. Research in open source repositories has focused on two broad areas: determining the original report associated with each known duplicate, and assigning a developer to fix a particular problem.Objective: Limited research has been done in developing a fully automated triager, one that can first ascertain if a problem report is original or duplicate, and then provide a list of 20 potential matches for a duplicate report. We address this limitation by developing an automated triaging system that can be used to assist human triagers in bug tracking systems.Method: Our automated triaging system automatically assigns a label of original or duplicate to each incoming problem report, and provides a list of 20 suggestions for reports classified as duplicate. The system uses 24 document similarity measures and associated summary statistics, along with a suite of document property and user metrics. We perform our research on a lifetime of problem reports from the Eclipse, Firefox and Open Office repositories. Results: Our system can be used as a filtration aide, with high original recall exceeding 95% and low duplicate recall, or as a triaging guide, with balanced recall of approximately 70% for both originals and duplicates. Furthermore, the system reduces the workload on the triager by over 90%.Conclusions: Our work represents the first full scale effort at automatically triaging problem reports in open source repositories. By utilizing multiple similarity measures, we reduce the potential of false matches caused by the diversity of human language."
"Editorial - Introduction to the EASE 2016 special section: Evidence-based software engineering: Past, present, and future","AbstractThe International Conference on Evaluation and Assessment in Software Engineering (EASE) had its twentieth anniversary in 2016, with that year’s edition hosted in Limerick, Ireland. Founded in 1997, the EASE conference was the first event solely dedicated to encouraging empirical research in software engineering, and its founders have been longtime advocates of evidence-based software engineering (EBSE). In this editorial, we briefly look back at the history of EBSE and the EASE conference. We then introduce the four articles which are revised and extended versions of papers presented at EASE 2016. We conclude by looking at the future of EBSE, and provide some suggestions for conducting and reporting empirical research."
Research article - The effects of perceived value and stakeholder satisfaction on software project impact,"AbstractContextIn this paper we present a multiple case study on the insights of software organizations into stakeholder satisfaction and (perceived) value of their software projects. Our study is based on the notion that quantifying and qualifying project size, cost, duration, defects, and estimation accuracy needs to be done in relation with stakeholder satisfaction and perceived value.ObjectivesWe contrast project metrics such as cost, duration, number of defects and estimation accuracy with stakeholder satisfaction and perceived value.MethodIn order to find out whether our approach is practically feasible in an industrial setting, we performed two case studies; one in a Belgian telecom company and the other in a Dutch software company.ResultsIn this study we evaluate 22 software projects that were delivered during one release in the Belgian telecom company, and 4 additional large software releases (representing an extension of 174% in project size) that were delivered in a Dutch software company. Eighty-three (83) key stakeholders of two companies provide stakeholder satisfaction and perceived value measurements in 133 completed surveys.ConclusionsWe conclude that a focus on shortening overall project duration, and improving communication and team collaboration on intermediate progress is likely to have a positive impact on stakeholder satisfaction and perceived value. Our study does not provide any evidence that steering on costs helped to improve these. As an answer to our research question - how do stakeholder satisfaction and perceived value relate to cost, duration, defects, size and estimation accuracy of software projects? – we found five take-away-messages."
Research article - Risk-averse slope-based thresholds: Definition and empirical evaluation,"AbstractBackground. Practical use of a measure X for an internal attribute (e.g., size, complexity, cohesion, coupling) of software modules often requires setting a threshold on X, to make decisions as to which modules may be estimated to be potentially faulty. To keep quality under control, practitioners may want to set a threshold on X to identify “early symptoms” of possible faultiness of those modules that should be closely monitored and possibly modified.Objective. We propose and evaluate a risk-averse approach to setting thresholds on X based on properties of the slope of statistically significant fault-proneness models, to identify “early symptoms” of module faultiness.Method. To this end, we introduce four ways for setting thresholds on X. First, we use the value of X where a fault-proneness model curve changes direction the most, i.e., it has maximum convexity. Then, we use the values of X where the slope has specific values: one-half of the maximum slope, and the median and mean slope in the interval between minimum and maximum slopes.Results. We provide the theoretical underpinnings for our approach and we apply our approach to data from the PROMISE repository by building Binary Logistic and Probit regression fault-proneness models. The empirical study shows that the proposed thresholds effectively detect “early symptoms” of module faultiness, while achieving a level of accuracy in classifying faulty modules close to other usual fault-proneness thresholds.Conclusions. Our method can be practically used for setting “early symptom” thresholds based on evidence captured by statistically significant models. Also, the thresholds depend on characteristics of the models alone, so project managers do not need to devise the thresholds themselves. The proposed thresholds correspond to increasing risk levels, so project managers can choose the threshold that best suits their needs in a risk-averse framework."
Research article - Findings from a multi-method study on test-driven development,"AbstractContextTest-driven development (TDD) is an iterative software development practice where unit tests are defined before production code. A number of quantitative empirical investigations have been conducted about this practice. The results are contrasting and inconclusive. In addition, previous studies fail to analyze the values, beliefs, and assumptions that inform and shape TDD.ObjectiveWe present a study designed, and conducted to understand the values, beliefs, and assumptions about TDD. Participants were novice and professional software developers.MethodWe conducted an ethnographically-informed study with 14 novice software developers, i.e., graduate students in Computer Science at the University of Basilicata, and six professional software developers (with one to 10 years work experience). The participants worked on the implementation of a new feature for an existing software written in Java. We immersed ourselves in the context of our study. We collected qualitative information by means of audio recordings, contemporaneous field notes, and other kinds of artifacts. We collected quantitative data from the integrated development environment to support or refute the ethnography results.ResultsThe main insights of our study can be summarized as follows: (i) refactoring (one of the phases of TDD) is not performed as often as the process requires and it is considered less important than other phases, (ii) the most important phase is implementation, (iii) unit tests are almost never up-to-date, and (iv) participants first build in their mind a sort of model of the source code to be implemented and only then write test cases. The analysis of the quantitative data supported the following qualitative findings: (i), (iii), and (iv).ConclusionsDevelopers write quick-and-dirty production code to pass the tests, do not update their tests often, and ignore refactoring."
Research article - Benefits and limitations of project-to-project job rotation in software organizations: A synthesis of evidence,"AbstractContextJob rotation has been proposed as a managerial practice to be applied in the organizational environment to reduce job monotony, boredom, and exhaustion resulting from job simplification, specialization, and repetition. The scientific literature distinguishes between job-to-job and project-to-project rotations. Despite the potential benefits and its actual use on behalf of software companies, we do not have an accumulated body of scientific knowledge about benefits and limitations of job rotation in software engineering practice. In particular, we have no concrete empirical evidence about the use of project-to-project rotations in practice.GoalWe aim to identify and discuss evidence about project-to-project (P2P) job rotation, in order to understand the potential benefits and limitations of this practice in software organizations.MethodWe deployed a mix-method research strategy to collect and analyze empirical evidence from the scientific literature, performing a systematic literature review, on one hand and from industrial practice, performing qualitative case studies on the other. We synthesized the evidence using techniques from meta-ethnography.ResultsWe found eight benefits, nine limitations, and two factors classified as both benefits and limitations of P2P rotations in software engineering. Different research methods yielded confirmatory and complementary evidence, emphasizing the importance of conducting mix-method research. We found no contradictory evidence and five factors were identified in more than one study using different research methods, contributing to the strength of the evidence.ConclusionWe synthesized evidence from multiple sources and used different research methods concerning the benefits and limitations of P2P rotation in software engineering practice. Our findings show that rotation tends to benefit important job outcomes, such as motivation, and to decrease job monotony. The main limitations were associated with the potential increase in intra-group social conflicts, individual cognitive effort, and workload, and a temporary decrease in productivity."
