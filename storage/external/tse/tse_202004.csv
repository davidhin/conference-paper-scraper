title,abstract
Requirements Engineering for Safety-Critical Systems: An Interview Study with Industry Practitioners,"Abstract We have conducted in-depth interviews with experienced practitioners in the Safety-Critical Systems (SCS) domain in order to investigate several aspects related to requirements specification and safety analysis for SCS. We interviewed 19 practitioners from eleven SCS companies in different domains with the intention of verifying which approaches they use day-to-day, and what their perceptions are in relation to the approaches used to elicit, analyze, specify and validate safety requirements. The aim of this study is to obtain an in-depth understanding of how requirements engineering is carried out in companies that develop SCS.Keywords Formal Specification, Safety, Safety Critical Software, Systems Analysis, Requirements Specification, Safety Critical Systems Domain, Experienced Practitioners, In Depth Interviews, Industry Practitioners, Requirements Engineering, Safety Requirements, Day To Day, Safety Analysis, Safety, Companies, Requirements Engineering, Software, Certification, Interviews, Unified Modeling Language, Requirements, Specification, Software And System Safety, Requirements Engineering, Safety Critical Systems, Software Engineering, SCS"
A Framework for Temporal Verification Support in Domain-Specific Modelling,"Abstract In Domain-Specific Modelling (DSM) the general goal is to provide Domain-Specific Modelling Languages (DSMLs) for domain users to model systems using concepts and notations they are familiar with, in their problem domain. Verifying whether a model satisfies a set of requirements is considered to be an important challenge in DSM, but is nevertheless mostly neglected. We present a solution in the form of ProMoBox, a framework that integrates the definition and verification of temporal properties in discrete-time behavioural DSMLs, whose semantics can be described as a schedule of graph rewrite rules. Thanks to the expressiveness of graph rewriting, this covers a very large class of problems. With ProMoBox, the domain user models not only the system with a DSML, but also its properties, input model, run-time state and output trace. A DSML is thus comprised of five sublanguages, which share domain-specific syntax, and are generated from a single metamodel. Generic transformations to and from a verification backbone ensure that both the language engineer and the domain user are shielded from underlying notations and techniques. We explicitly model the ProMoBox framework's process in the paper. Furthermore, we evaluate ProMoBox to assert that it supports the specification and verification of properties in a highly flexible and automated way.Keywords Formal Specification, Formal Verification, Graph Theory, Rewriting Systems, Temporal Logic, Domain Specific Modelling Languages, Domain User Models, Input Model, Share Domain Specific Syntax, Pro Mo Box Framework, Temporal Verification Support, Discrete Time Behavioural DSML, Generic Transformations, Verification Backbone, Syntactics, Semantics, Formal Specifications, Formal Verification, Model Driven Engineering, Model Checking, Domain Specific Modelling, Model Driven Engineering, Language Engineering"
ConTesa: Directed Test Suite Augmentation for Concurrent Software,"Abstract As software evolves, test suite augmentation techniques may be used to identify which part of the program needs to be tested due to code changes and how to generate these new test cases for regression testing. However, existing techniques focus exclusively on sequential software, without considering concurrent software in which multiple threads may interleave with each other during the execution and thus lead to a combinatorial explosion. To fill the gap, we propose ConTesa, the first test suite augmentation tool for concurrent software. The goal is to generate new test cases capable of exercising both code changes and the thread interleavings affected by these code changes. At the center of ConTesa is a two-pronged approach. First, it judiciously reuses the current test inputs while amplifying their interleaving coverage using random thread schedules. Then, it leverages an incremental symbolic execution technique to generate more test inputs and interleavings, to cover the new concurrency-related program behaviors. We have implemented ConTesa and evaluated it on a set of real-world multithreaded Linux applications. Our results show that it can achieve a significantly high interleaving coverage and reveal more bugs than state-of-the-art testing techniques.Keywords Linux, Multi Threading, Program Debugging, Program Diagnostics, Program Testing, Concurrent Software, Code Changes, Thread Interleavings, Con Tesa, Test Inputs, Random Thread Schedules, Incremental Symbolic Execution Technique, Concurrency Related Program Behaviors, High Interleaving Coverage, Directed Test Suite Augmentation, Test Suite Augmentation Techniques, Regression Testing, Sequential Software, Multiple Threads, Test Suite Augmentation Tool, Testing, Schedules, Instruction Sets, Concurrent Computing, Tools, Context, Regression Testing, Concurrent Programming, Symbolic Execution, Dynamic Analysis"
Leveraging Historical Associations between Requirements and Source Code to Identify Impacted Classes,"Abstract As new requirements are introduced and implemented in a software system, developers must identify the set of source code classes which need to be changed. Therefore, past effort has focused on predicting the set of classes impacted by a requirement. In this paper, we introduce and evaluate a new type of information based on the intuition that the set of requirements which are associated with historical changes to a specific class are likely to exhibit semantic similarity to new requirements which impact that class. This new Requirements to Requirements Set (R2RS) family of metrics captures the semantic similarity between a new requirement and the set of existing requirements previously associated with a class. The aim of this paper is to present and evaluate the usefulness of R2RS metrics in predicting the set of classes impacted by a requirement. We consider 18 different R2RS metrics by combining six natural language processing techniques to measure the semantic similarity among texts (e.g., VSM) and three distribution scores to compute overall similarity (e.g., average among similarity scores). We evaluate if R2RS is useful for predicting impacted classes in combination and against four other families of metrics that are based upon temporal locality of changes, direct similarity to code, complexity metrics, and code smells. Our evaluation features five classifiers and 78 releases belonging to four large open-source projects, which result in over 700,000 candidate impacted classes. Experimental results show that leveraging R2RS information increases the accuracy of predicting impacted classes practically by an average of more than 60 percent across the various classifiers and projects.Keywords Public Domain Software, Software Maintenance, Software Metrics, Software Quality, Text Analysis, Historical Associations, Impacted Classes, Source Code Classes, Semantic Similarity, Existing Requirements, R 2 RS Metrics, Leveraging R 2 RS Information, Requirements To Requirements Set, VSM, Open Source Projects, Measurement, Semantics, Natural Language Processing, Complexity Theory, Open Source Software, Task Analysis, Impact Analysis, Mining Software Repositories, Traceability"
A Look into Programmersâ€™ Heads,"Keywords Biomedical MRI, Brain, Cognition, Java, Medical Computing, Neurophysiology, Default Mode Network, Java, Programming Language Reduced Cognitive Effort, Language Processing, Working Memory, Brain Regions, F MRI Scanner, Programming Language, Program Comprehension, Functional Magnetic Resonance Imaging, Task Analysis, Cognition, Brain, Programming, Blood, Functional Magnetic Resonance Imaging, Program Comprehension"
