title,abstract
Automatic Software Refactoring via Weighted Clustering in Method-Level Networks,"Keywords Network Theory Graphs, Pattern Clustering, Software Maintenance, Software Quality, High Cohesion, Low Coupling, Merging Classes, Splitting Related Classes, Optimal Functionality Distribution, Weighted Clustering Algorithm, Merged Method Level Networks, Preprocessing Steps, Coupling Problems, Inheritance Hierarchies, Refactoring Suggestions, Refactoring Results, Automatic Software Refactoring, System Level Multiple Refactoring Algorithm, Class Refactoring Opportunities, Open Source Tool, Couplings, Clustering Algorithms, Software Algorithms, Measurement, Software Systems, Partitioning Algorithms, Clustering Analysis, Cohesion, Coupling, Complex Network, Software Refactoring"
"Choosing Component Origins for Software Intensive Systems: In-House, COTS, OSS or Outsourcing?â€”A Case Survey","Abstract The choice of which software component to use influences the success of a software system. Only a few empirical studies investigate how the choice of components is conducted in industrial practice. This is important to understand to tailor research solutions to the needs of the industry. Existing studies focus on the choice for off-the-shelf (OTS) components. It is, however, also important to understand the implications of the choice of alternative component sourcing options (CSOs), such as outsourcing versus the use of OTS. Previous research has shown that the choice has major implications on the development process as well as on the ability to evolve the system. The objective of this study is to explore how decision making took place in industry to choose among CSOs. Overall, 22 industrial cases have been studied through a case survey. The results show that the solutions specifically for CSO decisions are deterministic and based on optimization approaches. The non-deterministic solutions proposed for architectural group decision making appear to suit the CSO decision making in industry better. Interestingly, the final decision was perceived negatively in nine cases and positively in seven cases, while in the remaining cases it was perceived as neither positive nor negative.Keywords Decision Making, Outsourcing, Companies, Computer Architecture, Software, Industries, Decision Making, In House, COTS, OSS, Outsourcing"
Complete and Interpretable Conformance Checking of Business Processes,"Abstract This article presents a method for checking the conformance between an event log capturing the actual execution of a business process, and a model capturing its expected or normative execution. Given a process model and an event log, the method returns a set of statements in natural language describing the behavior allowed by the model but not observed in the log and vice versa. The method relies on a unified representation of process models and event logs based on a well-known model of concurrency, namely event structures. Specifically, the problem of conformance checking is approached by converting the event log into an event structure, converting the process model into another event structure, and aligning the two event structures via an error-correcting synchronized product. Each difference detected in the synchronized product is then verbalized as a natural language statement. An empirical evaluation shows that the proposed method can handle real datasets and produces more concise and higher-level difference descriptions than state-of-the-art conformance checking methods. In a survey designed according to the technology acceptance model, practitioners showed a preference towards the proposed method with respect to a state-of-the-art baseline.Keywords Business, Synchronization, Computational Modeling, Data Mining, Natural Languages, Software Systems, Context Modeling, Process Mining, Conformance Checking, Process Model, Event Log, Event Structure"
Formulating Criticality-Based Cost-Effective Fault Tolerance Strategies for Multi-Tenant Service-Based Systems,"Abstract The proliferation of cloud computing has fueled the rapid growth of multi-tenant service-based systems (SBSs), which serve multiple tenants simultaneously by composing existing services in the form of business processes. In a distributed and volatile operating environment, runtime anomalies may occur to the component services of an SBS and cause end-to-end quality violations. Engineering multi-tenant SBSs that can quickly handle runtime anomalies cost effectively has become a significant challenge. Different approaches have been proposed to formulate fault tolerance strategies for engineering SBSs. However, none of the existing approaches has sufficiently considered the service criticality based on multi-tenancy where multiple tenants share the same SBS instance with different multi-dimensional quality preferences. In this paper, we propose Criticality-based Fault Tolerance for Multi-Tenant SBSs (CFT4MTS), a novel approach that formulates cost-effective fault tolerance strategies for multi-tenant SBSs by providing redundancy for the critical component services. First, the criticality of each component service is evaluated based on its multi-dimensional quality and multiple tenants sharing the component service with differentiated quality preferences. Then, the fault tolerance problem is modelled as an Integer Programming problem to identify the optimal fault tolerance strategy. The experimental results show that, compared with three existing representative approaches, CFT4MTS can alleviate degradation in the quality of multi-tenant SBSs in a much more effective and efficient way.Keywords Fault Tolerant Systems, Streaming Media, Runtime, Redundancy, Cloud Computing, Business, Cloud Computing, Criticality, Fault Tolerance, Multi Tenancy, Redundancy, Service Based System"
