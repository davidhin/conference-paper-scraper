title,abstract
A Systematic Literature Review of Applications of the Physics of Notations,"Abstract INTRODUCTION: The Physics of Notations (PoN) is a theory for the design of cognitively effective visual notations, emphasizing the need for design grounded in objective and verifiable rationale. Although increasingly applied, no systematic analysis of PoN applications has yet been performed to assess the theory's efficacy in practice. OBJECTIVES: Our primary objective was to assess the scope and verifiability of PoN applications. METHOD: We performed a systematic literature review (SLR) of peer-reviewed PoN applications. We analyzed what visual notations have been evaluated and designed using the PoN, for what reasons, to what degree applications consider requirements of their notation's users, and how verifiable these applications are. RESULTS: Seventy PoN applications were analyzed. We found major differences between applications evaluating existing notations and applications designing new notations. Particularly, in the case of new notations, we found that most applications adopted the PoN with little critical thought towards it, rarely considered its suitability for a particular context, and typically treated and discussed the PoN with few, if any, verifiable details and data. CONCLUSION: The results warrant consideration for those applying the PoN to do so carefully, and show the need for additional means to guide designers in systematically applying the PoN.Keywords Data Visualisation, Formal Specification, Visual Languages, Systematic Literature Review, Cognitively Effective Visual Notations, Verifiable Rationale, Systematic Analysis, Peer Reviewed Po N Applications, Physics Of Notations, SLR, Objective Rationale, Visualization, Unified Modeling Language, Semantics, Complexity Theory, Physics, Systematic Literature Review, Physics Of Notations, Visual Notations, Cognitive Effectiveness, Design Rationale"
A Systematic Review of Interaction in Search-Based Software Engineering,"Abstract Search-Based Software Engineering (SBSE) has been successfully applied to automate a wide range of software development activities. Nevertheless, in those software engineering problems where human evaluation and preference are crucial, such insights have proved difficult to characterize in search, and solutions might not look natural when that is the expectation. In an attempt to address this, an increasing number of researchers have reported the incorporation of the 'human-in-the-loop' during search and interactive SBSE has attracted significant attention recently. However, reported results are fragmented over different development phases, and a great variety of novel interactive approaches and algorithmic techniques have emerged. To better integrate these results, we have performed a systematic literature review of interactive SBSE. From a total of 669 papers, 26 primary studies were identified. To enable their analysis, we formulated a classification scheme focused on four crucial aspects of interactive search, i.e., the problem formulation, search technique, interactive approach, and the empirical framework. Our intention is that the classification scheme affords a methodological approach for interactive SBSE. Lastly, as well as providing a detailed cross analysis, we identify and discuss some open issues and potential future trends for the research community.Keywords Interactive Systems, Reviews, Search Problems, Software Engineering, Search Based Software Engineering, Development Phases, Search Technique, Interactive Search, Systematic Literature Review, Interactive Approach, Interactive SBSE, Human Evaluation, Software Engineering Problems, Software Development Activities, Software, Software Engineering, Search Problems, Optimization, Systematics, Market Research, Software Metrics, Search Based Software Engineering, Interaction, Systematic Literature Review, Optimization"
VT-Revolution: Interactive Programming Video Tutorial Authoring and Watching System,
Instance Migration Validity for Dynamic Evolution of Data-Aware Processes,"Abstract Likely more than many other software artifacts, business processes constantly evolve to adapt to ever changing application requirements. To enable dynamic process evolution, where changes are applied to in-flight processes, running process instances have to be migrated. On the one hand, as many instances as possible should be migrated to the changed process. On the other hand, the validity to migrate an instance should be guaranteed to avoid introducing dynamic change bugs after migration. As our theoretical results show, when the state of variables is taken into account, migration validity of data-aware process instances is undecidable. Based on the trace of an instance, existing approaches leverage trace replaying to check migration validity. However, they err on the side of caution, not identifying many instances as potentially safe to migrate. We present a more relaxed migration validity checking approach based on the dependence graph of a trace. We evaluate effectiveness and efficiency of our approach experimentally showing that it allows for more instances to safely migrate than for existing approaches and that it scales in the number of instances checked.Keywords Business Data Processing, Graph Theory, Program Debugging, Program Diagnostics, Software Architecture, Instance Migration Validity, Dynamic Evolution, Business Processes, Dynamic Process Evolution, In Flight Processes, Data Aware Process Instances, Trace Replaying, Dependence Graph, Process Control, Business Data Processing, Debugging, Software Architecture, Data Aware Process, Dynamic Evolution, Instance Migration, Migration Validity, Trace Slicing"
Verification Templates for the Analysis of User Interface Software Design,"Abstract The paper describes templates for model-based analysis of usability and safety aspects of user interface software design. The templates crystallize general usability principles commonly addressed in user-centred safety requirements, such as the ability to undo user actions, the visibility of operational modes, and the predictability of user interface behavior. These requirements have standard forms across different application domains, and can be instantiated as properties of specific devices. The modeling and analysis process is carried out using the Prototype Verification System (PVS), and is further facilitated by structuring the specification of the device using a format that is designed to be generic across interactive systems. A concrete case study based on a commercial infusion pump is used to illustrate the approach. A detailed presentation of the automated verification process using PVS shows how failed proof attempts provide precise information about problematic user interface software features.Keywords Program Verification, Security Of Data, User Interfaces, User Interface Software Design, Model Based Analysis, Safety Aspects, General Usability Principles, User Centred Safety Requirements, Automated Verification Process, Prototype Verification System, Verification Templates, User Interfaces, Safety, ISO Standards, Usability, Human Computer Interaction, Model Based Development, Formal Specifications, Formal Verification, Prototype Verification System PVS"
