title,abstract
Fully Reflective Execution Environments: Virtual Machines for More Flexible Software,"Keywords Programming Language Semantics, Security Of Data, Software Maintenance, Virtual Machines, Reflective Execution Environments, Virtual Machines, Flexible Software, Mainstream V Ms, Execution Semantics, Memory Management, Evolvability, Maintainability, Software Adaptation Tasks, Fully Reflective VM, Programming Languages, Reference Architecture, Programming Language Semantics, Dynamic Adaptation Scenarios, Truffle MATE Mechanism, Software, Memory Management, Task Analysis, Virtual Machining, Semantics, Shape, Reflection, Virtual Machines, Metaobject Protocols, Dynamic Adaptation"
Asymmetric Release Planning: Compromising Satisfaction against Dissatisfaction,"Abstract Maximizing satisfaction from offering features as part of the upcoming release(s) is different from minimizing dissatisfaction gained from not offering features. This asymmetric behavior has never been utilized for product release planning. We study Asymmetric Release Planning (ARP) by accommodating asymmetric feature evaluation. We formulated and solved ARP as a bi-criteria optimization problem. In its essence, it is the search for optimized trade-offs between maximum stakeholder satisfaction and minimum dissatisfaction. Different techniques including a continuous variant of Kano analysis are available to predict the impact on satisfaction and dissatisfaction with a product release from offering or not offering a feature. As a proof of concept,we validated the proposed solution approach called Satisfaction-Dissatisfaction Optimizer (SDO) via a real-world case study project. From running three replications with varying effort capacities, we demonstrate that SDO generates optimized trade-off solutions being (i) of a different value profile and different structure, (ii) superior to the application of random search and heuristics in terms of quality and completeness, and (iii) superior to the usage of manually generated solutions generated from managers of the case study company. A survey with 20 stakeholders evaluated the applicability and usefulness of the generated results.Keywords Optimisation, Pattern Classification, Offering Features, Asymmetric Behavior, Product Release Planning, ARP, Asymmetric Feature Evaluation, Maximum Stakeholder Satisfaction, Minimum Dissatisfaction, Optimized Trade Off Solutions, Different Value Profile, Upcoming Release, Asymmetric Release Planning, Bicriteria Optimization Problem, Satisfaction Dissatisfaction Optimizer, Random Search, Planning, Stakeholders, Software Engineering, Software, Streaming Media, Mathematical Model, Optimization, Release Planning, Bi Objective Optimization, Stakeholder Satisfaction, Stakeholder Dissatisfaction, Case Study, Empirical Evaluation"
How Developers Diagnose Potential Security Vulnerabilities with a Static Analysis Tool,"Abstract While using security tools to resolve security defects, software developers must apply considerable effort. Success depends on a developer's ability to interact with tools, ask the right questions, and make strategic decisions. To build better security tools and subsequently help developers resolve defects more accurately and efficiently, we studied the defect resolution process-from the questions developers ask to their strategies for answering them. In this paper, we report on an exploratory study with novice and experienced software developers. We equipped them with Find Security Bugs, a security-oriented static analysis tool, and observed their interactions with security vulnerabilities in an open-source system that they had previously contributed to. We found that they asked questions not only about security vulnerabilities, associated attacks, and fixes, but also questions about the software itself, the social ecosystem that built the software, and related resources and tools. We describe the strategic successes and failures we observed and how future tools can leverage our findings to encourage better strategies.Keywords Program Debugging, Program Diagnostics, Security Of Data, Software Engineering, Software Maintenance, Security Tools, Questions Developers, Experienced Software Developers, Security Bugs, Security Oriented Static Analysis Tool, Security Defects, Potential Security Vulnerabilities, Defect Resolution Process, Open Source System, Social Ecosystem, Tools, Task Analysis, Software, Static Analysis, Computer Bugs, SQL Injection, Software Engineering, Human Factors, Security, Software Tools, Programming Environments"
Predictive Mutation Testing,"Abstract Test suites play a key role in ensuring software quality. A good test suite may detect more faults than a poor-quality one. Mutation testing is a powerful methodology for evaluating the fault-detection ability of test suites. In mutation testing, a large number of mutants may be generated and need to be executed against the test suite under evaluation to check how many mutants the test suite is able to detect, as well as the kind of mutants that the current test suite fails to detect. Consequently, although highly effective, mutation testing is widely recognized to be also computationally expensive, inhibiting wider uptake. To alleviate this efficiency concern, we propose Predictive Mutation Testing (PMT): the first approach to predicting mutation testing results without executing mutants. In particular, PMT constructs a classification model, based on a series of features related to mutants and tests, and uses the model to predict whether a mutant would be killed or remain alive without executing it. PMT has been evaluated on 163 real-world projects under two application scenarios (cross-version and cross-project). The experimental results demonstrate that PMT improves the efficiency of mutation testing by up to 151.4X while incurring only a small accuracy loss. It achieves above 0.80 AUC values for the majority of projects, indicating a good tradeoff between the efficiency and effectiveness of predictive mutation testing. Also, PMT is shown to perform well on different tools and tests, be robust in the presence of imbalanced data, and have high predictability (over 60 percent confidence) when predicting the execution results of the majority of mutants.Keywords Pattern Classification, Program Testing, Sensitivity Analysis, Software Quality, Predictive Mutation Testing, Good Test Suite, PMT, Mutation Testing Results, Software Quality, Fault Detection Ability, Classification Model, AUC Values, Imbalanced Data, Predictive Models, Pattern Classification, Software Testing, Sensitivity Analysis, Software Quality, Machine Learning, PMT, Mutation Testing, Machine Learning, Binary Classification"
Test Generation and Test Prioritization for Simulink Models with Dynamic Behavior,"Abstract All engineering disciplines are founded and rely on models, although they may differ on purposes and usages of modeling. Among the different disciplines, the engineering of Cyber Physical Systems (CPSs) particularly relies on models with dynamic behaviors (i.e., models that exhibit time-varying changes). The Simulink modeling platform greatly appeals to CPS engineers since it captures dynamic behavior models. It further provides seamless support for two indispensable engineering activities: (1) automated verification of abstract system models via model simulation, and (2) automated generation of system implementation via code generation. We identify three main challenges in the verification and testing of Simulink models with dynamic behavior, namely incompatibility, oracle and scalability challenges. We propose a Simulink testing approach that attempts to address these challenges. Specifically, we propose a black-box test generation approach, implemented based on meta-heuristic search, that aims to maximize diversity in test output signals generated by Simulink models. We argue that in the CPS domain test oracles are likely to be manual and therefore the main cost driver of testing. In order to lower the cost of manual test oracles, we propose a test prioritization algorithm to automatically rank test cases generated by our test generation algorithm according to their likelihood to reveal a fault. Engineers can then select, according to their test budget, a subset of the most highly ranked test cases. To demonstrate scalability, we evaluate our testing approach using industrial Simulink models. Our evaluation shows that our test generation and test prioritization approaches outperform baseline techniques that rely on random testing and structural coverage.Keywords Computer Simulation, Cyber Physical Systems, Program Compilers, Program Testing, Program Verification, Search Problems, Industrial Simulink Models, Random Testing, Simulink Modeling Platform, Dynamic Behavior Models, Abstract System Models, Code Generation, Simulink Testing Approach, Black Box Test Generation Approach, Test Output Signals, CPS Domain Test Oracles, Test Budget, Cyber Physical Systems, Automated Verification, Automated Generation, Meta Heuristic Search, Cost Driver, Test Prioritization Approach, Structural Coverage, Software Packages, Testing, Tools, Computational Modeling, Vehicle Dynamics, Scalability, Simulink Models, Search Based Software Testing, Test Generation, Test Prioritization, Test Oracle, Output Diversity, Signal Features, Structural Coverage"
