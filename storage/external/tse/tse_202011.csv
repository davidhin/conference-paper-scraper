title,abstract
How Well Do Change Sequences Predict Defects? Sequence Learning from Software Changes,"Abstract Software defect prediction, which aims to identify defective modules, can assist developers in finding bugs and prioritizing limited quality assurance resources. Various features to build defect prediction models have been proposed and evaluated. Among them, process metrics are one important category. Yet, existing process metrics are mainly encoded manually from change histories and ignore the sequential information arising from the changes during software evolution. Are the change sequences derived from such information useful to characterize buggy program modules? How can we leverage such sequences to build good defect prediction models? Unlike traditional process metrics used for existing defect prediction models, change sequences are mostly vectors of variable length. This makes it difficult to apply such sequences directly in prediction models that are driven by conventional classifiers. To resolve this challenge, we utilize Recurrent Neural Network (RNN), which is a deep learning technique, to encode features from sequence data automatically. In this paper, we propose a novel approach called Fences, which extracts six types of change sequences covering different aspects of software changes via fine-grained change analysis. It approaches defects prediction by mapping it to a sequence labeling problem solvable by RNN. Our evaluations on 10 open source projects show that Fences can predict defects with high performance. In particular, our approach achieves an average F-measure of 0.657, which improves the prediction models built on traditional metrics significantly. The improvements vary from 31.6 to 46.8 percent on average. In terms of AUC, Fences achieves an average value of 0.892, and the improvements over baselines vary from 4.2 to 16.1 percent. Fences also outperforms the state-of-the-art technique which learns semantic features automatically from static code via deep learning.Keywords Learning Artificial Intelligence, Program Debugging, Program Diagnostics, Public Domain Software, Recurrent Neural Nets, Software Maintenance, Software Metrics, Software Quality, Software Changes, Software Defect Prediction, Software Evolution, Defect Prediction Models, Fine Grained Change Analysis, Sequence Labeling Problem, Sequence Learning, Fences Approach, RNN, Recurrent Neural Network, Efficiency 16 1 Percent, Efficiency 46 8 Percent, Measurement, Software, Predictive Models, Semantics, History, Machine Learning, Feature Extraction, Defect Prediction, Process Metrics, Sequence Learning"
Understanding and Detecting Fragmentation-Induced Compatibility Issues for Android Apps,"Abstract Android ecosystem is heavily fragmented. The numerous combinations of different device models and operating system versions make it impossible for Android app developers to exhaustively test their apps, and thus various compatibility issues arise. Unfortunately, little is known on the characteristics of such fragmentation-induced compatibility issues. No mature tools exist to help developers quickly diagnose and fix these issues. To bridge the gap, we conducted an empirical study on 220 real-world compatibility issues collected from five popular open-source Android apps. We further interviewed Android practitioners and conducted an online survey to gain insights from real practices. Via the studies, we characterized compatibility issues, investigated common practices to handle compatibility issues, and disclosed that these issues exhibit common patterns. With these findings, we propose a technique, FicFinder, to automatically detect compatibility issues in Android apps. FicFinder performs static code analysis based on a model that captures Android APIs as well as their associated context by which compatibility issues can be triggered. FicFinder reports actionable debugging information to developers when it detects potential issues. We evaluated FicFinder with 53 large-scale open-source Android apps. The results show that FicFinder can precisely detect compatibility issues in these apps and uncover previously-unknown issues.Keywords Android Operating System, Application Program Interfaces, Mobile Computing, Program Debugging, Program Diagnostics, Smart Phones, Large Scale Open Source Android Apps, Android App Developers, Fragmentation Induced Compatibility Issues, Fic Finder Technique, Androids, Humanoid Robots, Biological System Modeling, Smart Phones, Hardware, Testing, Ecosystems, Mobile Applications, Android Applications, Android Fragmentation, Compatibility Issues, Empirical Study, Program Analysis"
The Impact of Class Rebalancing Techniques on the Performance and Interpretation of Defect Prediction Models,"Abstract Defect models that are trained on class imbalanced datasets (i.e., the proportion of defective and clean modules is not equally represented) are highly susceptible to produce inaccurate prediction models. Prior research compares the impact of class rebalancing techniques on the performance of defect models but arrives at contradictory conclusions due to the use of different choice of datasets, classification techniques, and performance measures. Such contradictory conclusions make it hard to derive practical guidelines for whether class rebalancing techniques should be applied in the context of defect models. In this paper, we investigate the impact of class rebalancing techniques on the performance measures and interpretation of defect models. We also investigate the experimental settings in which class rebalancing techniques are beneficial for defect models. Through a case study of 101 datasets that span across proprietary and open-source systems, we conclude that the impact of class rebalancing techniques on the performance of defect prediction models depends on the used performance measure and the used classification techniques. We observe that the optimized SMOTE technique and the under-sampling technique are beneficial when quality assurance teams wish to increase AUC and Recall, respectively, but they should be avoided when deriving knowledge and understandings from defect models.Keywords Learning Artificial Intelligence, Pattern Classification, Sampling Methods, Software Metrics, Software Quality, Software Reliability, Classification Techniques, Class Rebalancing Techniques, Defect Prediction Models, SMOTE Technique, Class Imbalanced Datasets, Performance Measure, Predictive Models, Training, Analytical Models, Guidelines, Context Modeling, Open Source Software, Software Quality Assurance, Software Defect Prediction, Class Rebalancing Techniques, Experimental Design, Empirical Investigation"
"Perceptions, Expectations, and Challenges in Defect Prediction","Abstract Defect prediction has been an active research area for over four decades. Despite numerous studies on defect prediction, the potential value of defect prediction in practice remains unclear. To address this issue, we performed a mixed qualitative and quantitative study to investigate what practitioners think, behave and expect in contrast to research findings when it comes to defect prediction. We collected hypotheses from open-ended interviews and a literature review of defect prediction papers that were published at ICSE, ESEC/FSE, ASE, TSE and TOSEM in the last 6 years (2012-2017). We then conducted a validation survey where the hypotheses became statements or options of our survey questions. We received 395 responses from practitioners from over 33 countries across five continents. Some of our key findings include: 1) Over 90 percent of respondents are willing to adopt defect prediction techniques. 2) There exists a disconnect between practitioners' perceptions and well supported research evidence regarding defect density distribution and the relationship between file size and defectiveness. 3) 7.2 percent of the respondents reveal an inconsistency between their behavior and perception regarding defect prediction. 4) Defect prediction at the feature level is the most preferred level of granularity by practitioners. 5) During bug fixing, more than 40 percent of the respondents acknowledged that they would make a “work-around” fix rather than correct the actual error-causing code. Through a qualitative analysis of free-form text responses, we identified reasons why practitioners are reluctant to adopt defect prediction tools. We also noted features that practitioners expect defect prediction tools to deliver. Based on our findings, we highlight future research directions and provide recommendations for practitioners.Keywords Program Debugging, Software Development Management, Software Maintenance, Software Metrics, Software Quality, Software Reliability, Defect Prediction Papers, Defect Prediction Techniques, Defect Prediction Tools, Bug Fixing, Efficiency 90 0 Percent, Efficiency 7 2 Percent, Efficiency 40 0 Percent, Interviews, Tools, Software, Bibliographies, Computer Bugs, Companies, Continents, Defect Prediction, Empirical Study, Practitioner, Survey"
Dynamic Update of Discrete Event Controllers,"Abstract Discrete event controllers are at the heart of many software systems that require continuous operation. Changing these controllers at runtime to cope with changes in its execution environment or system requirements change is a challenging open problem. In this paper we address the problem of dynamic update of controllers in reactive systems. We present a general approach to specifying correctness criteria for dynamic update and a technique for automatically computing a controller that handles the transition from the old to the new specification, assuring that the system will reach a state in which such a transition can correctly occur and in which the underlying system architecture can reconfigure. Our solution uses discrete event controller synthesis to automatically build a controller that guarantees both progress towards update and safe update.Keywords Control System Synthesis, Discrete Event Systems, Discrete Event Controllers, Software Systems, Reactive Systems, Event Controller Synthesis, Tools, Runtime, Paints, Control Systems, Business, Safety, Controller Synthesis, Dynamic Update, Adaptive Systems"
