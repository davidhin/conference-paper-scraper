title,abstract
A Comparison of Program Comprehension Strategies by Blind and Sighted Programmers,"Keywords Programming Environments, Public Domain Software, Software Prototyping, Source Code Software, Source Code, Sighted Programmers, Program Comprehension Strategies, Reading Processes, Stark, Program Comprehension, Reading Method Signature, Tools, Software, Blindness, Navigation, Programming Profession, Software Engineering, Program Comprehension, Accessibility Technology, Blindness"
A Formal Specification and Verification Framework for Timed Security Protocols,
A Survey of Recent Trends in Testing Concurrent Software Systems,"Abstract Many modern software systems are composed of multiple execution flows that run simultaneously, spanning from applications designed to exploit the power of modern multi-core architectures to distributed systems consisting of multiple components deployed on different physical nodes. We collectively refer to such systems as concurrent systems. Concurrent systems are difficult to test, since the faults that derive from their concurrent nature depend on the interleavings of the actions performed by the individual execution flows. Testing techniques that target these faults must take into account the concurrency aspects of the systems. The increasingly rapid spread of parallel and distributed architectures led to a deluge of concurrent software systems, and the explosion of testing techniques for such systems in the last decade. The current lack of a comprehensive classification, analysis and comparison of the many testing techniques for concurrent systems limits the understanding of the strengths and weaknesses of each approach and hampers the future advancements in the field. This survey provides a framework to capture the key features of the available techniques to test concurrent software systems, identifies a set of classification criteria to review and compare the available techniques, and discusses in details their strengths and weaknesses, leading to a thorough assessment of the field and paving the road for future progresses.Keywords Formal Specification, Multiprocessing Systems, Object Oriented Programming, Parallel Architectures, Program Testing, Distributed Systems, Testing Techniques, Concurrency Aspects, Modern Software Systems, Modern Multicore Architectures, Concurrent Software System Testing, Multiple Execution Flows, Parallel Architecture, Distributed Architecture, Classification Criteria, Testing, Software Systems, Message Passing, History, Concurrent Computing, Computer Architecture, Synchronization, Survey, Classification, Testing, Concurrent Systems, Parallel Systems, Distributed Systems"
Control-Theoretical Software Adaptation: A Systematic Literature Review,"Abstract Modern software applications are subject to uncertain operating conditions, such as dynamics in the availability of services and variations of system goals. Consequently, runtime changes cannot be ignored, but often cannot be predicted at design time. Control theory has been identified as a principled way of addressing runtime changes and it has been applied successfully to modify the structure and behavior of software applications. Most of the times, however, the adaptation targeted the resources that the software has available for execution (CPU, storage, etc.) more than the software application itself. This paper investigates the research efforts that have been conducted to make software adaptable by modifying the software rather than the resource allocated to its execution. This paper aims to identify: the focus of research on control-theoretical software adaptation; how software is modeled and what control mechanisms are used to adapt software; what software qualities and controller guarantees are considered. To that end, we performed a systematic literature review in which we extracted data from 42 primary studies selected from 1,512 papers that resulted from an automatic search. The results of our investigation show that even though the behavior of software is considered non-linear, research efforts use linear models to represent it, with some success. Also, the control strategies that are most often considered are classic control, mostly in the form of Proportional and Integral controllers, and Model Predictive Control. The paper also discusses sensing and actuating strategies that are prominent for software adaptation and the (often neglected) proof of formal properties. Finally, we distill open challenges for control-theoretical software adaptation.Keywords Predictive Control, Resource Allocation, Reverse Engineering, Software Engineering, Software Performance Evaluation, Software Quality, Control Theoretical Software Adaptation, Systematic Literature Review, Modern Software Applications, Runtime Changes, Software Application, Software Adaptable, Software Qualities, Model Predictive Control, Software, Control Theory, Adaptation Models, Runtime, Bibliographies, Mathematical Model, Knowledge Based Systems, Self Adaptive Software, Control Theory, Software Adaptation"
