title,abstract
Deep Semantic Feature Learning for Software Defect Prediction,"Abstract Software defect prediction, which predicts defective code regions, can assist developers in finding bugs and prioritizing their testing efforts. Traditional defect prediction features often fail to capture the semantic differences between different programs. This degrades the performance of the prediction models built on these traditional features. Thus, the capability to capture the semantics in programs is required to build accurate prediction models. To bridge the gap between semantics and defect prediction features, we propose leveraging a powerful representation-learning algorithm, deep learning, to learn the semantic representations of programs automatically from source code files and code changes. Specifically, we leverage a deep belief network (DBN) to automatically learn semantic features using token vectors extracted from the programs' abstract syntax trees (AST) (for file-level defect prediction models) and source code changes (for change-level defect prediction models). We examine the effectiveness of our approach on two file-level defect prediction tasks (i.e., file-level within-project defect prediction and file-level cross-project defect prediction) and two change-level defect prediction tasks (i.e., change-level within-project defect prediction and change-level cross-project defect prediction). Our experimental results indicate that the DBN-based semantic features can significantly improve the examined defect prediction tasks. Specifically, the improvements of semantic features against existing traditional features (in F1) range from 2.1 to 41.9 percentage points for file-level within-project defect prediction, from 1.5 to 13.4 percentage points for file-level cross-project defect prediction, from 1.0 to 8.6 percentage points for change-level within-project defect prediction, and from 0.6 to 9.9 percentage points for change-level cross-project defect prediction.Keywords Abstract Data Types, Belief Networks, Feature Extraction, Learning Artificial Intelligence, Program Debugging, Program Testing, Programming Language Semantics, Software Quality, Tree Data Structures, Deep Semantic Feature Learning, Software Defect Prediction, Defective Code Regions, Semantic Differences, Semantic Representations, Source Code Files, File Level Defect Prediction Models, Source Code Changes, Change Level Defect Prediction Models, File Level Within Project Defect Prediction, Change Level Within Project Defect Prediction, DBN Based Semantic Features, File Level Cross Project Defect Prediction, Change Level Cross Project Defect Prediction, Representation Learning Algorithm, Defect Prediction Features, Deep Belief Network, Token Vectors, Abstract Syntax Trees, Semantics, Predictive Models, Feature Extraction, Quality Assurance, Computer Bugs, Data Models, Prediction Models, Defect Prediction, Quality Assurance, Deep Learning, Semantic Features"
Search-Based Crash Reproduction and Its Impact on Debugging,"Abstract Software systems fail. These failures are often reported to issue tracking systems, where they are prioritized and assigned to responsible developers to be investigated. When developers debug software, they need to reproduce the reported failure in order to verify whether their fix actually prevents the failure from happening again. Since manually reproducing each failure could be a complex task, several automated techniques have been proposed to tackle this problem. Despite showing advancements in this area, the proposed techniques showed various types of limitations. In this paper, we present EvoCrash, a new approach to automated crash reproduction based on a novel evolutionary algorithm, called Guided Genetic Algorithm (GGA). We report on our empirical study on using EvoCrash to reproduce 54 real-world crashes, as well as the results of a controlled experiment, involving human participants, to assess the impact of EvoCrash tests in debugging. Based on our results, EvoCrash outperforms state-of-the-art techniques in crash reproduction and uncovers failures that are undetected by classical coverage-based unit test generation tools. In addition, we observed that using EvoCrash helps developers provide fixes more often and take less time when debugging, compared to developers debugging and fixing code without using EvoCrash tests.Keywords Genetic Algorithms, Program Debugging, Program Testing, Public Domain Software, System Recovery, Software Systems, Responsible Developers, Reported Failure, Automated Techniques, Automated Crash Reproduction, Evolutionary Algorithm, Real World Crashes, Guided Genetic Algorithm, Evo Crash Tests, Classical Coverage Based Unit Test Generation Tools, Fixing Code, Developer Debug Software, Developer Debugging, Tracking Systems, GGA, Human Participants, Debugging, Genetic Algorithms, Software Testing, Software Engineering, Computer Bugs, Search Based Software Testing, Genetic Algorithms, Automated Crash Reproduction, Empirical Software Engineering"
Cognitive Biases in Software Engineering: A Systematic Mapping Study,"Abstract One source of software project challenges and failures is the systematic errors introduced by human cognitive biases. Although extensively explored in cognitive psychology, investigations concerning cognitive biases have only recently gained popularity in software engineering research. This paper therefore systematically maps, aggregates and synthesizes the literature on cognitive biases in software engineering to generate a comprehensive body of knowledge, understand state-of-the-art research and provide guidelines for future research and practise. Focusing on bias antecedents, effects and mitigation techniques, we identified 65 articles (published between 1990 and 2016), which investigate 37 cognitive biases. Despite strong and increasing interest, the results reveal a scarcity of research on mitigation techniques and poor theoretical foundations in understanding and interpreting cognitive biases. Although bias-related research has generated many new insights in the software engineering community, specific bias mitigation techniques are still needed for software professionals to overcome the deleterious effects of cognitive biases on their work.Keywords Cognition, Psychology, Software Engineering, Systematic Mapping Study, Software Project Challenges, Human Cognitive Biases, Cognitive Psychology, Software Engineering Research, Bias Antecedents, Software Engineering Community, Specific Bias Mitigation Techniques, Systematic Errors, Cognition, Software Engineering, Software Project Management, Antecedents Of Cognitive Bias, Cognitive Bias, Debiasing, Effects Of Cognitive Bias, Software Engineering, Systematic Mapping"
Key Stakeholdersâ€™ Value Propositions for Feature Selection in Software-Intensive Products: An Industrial Case Study,"Abstract Numerous software companies are adopting value-based decision making. However, what does value mean for key stakeholders making decisions? How do different stakeholder groups understand value? Without an explicit understanding of what value means, decisions are subject to ambiguity and vagueness, which are likely to bias them. This case study provides an in-depth analysis of key stakeholders' value propositions when selecting features for a large telecommunications company's software-intensive product. Stakeholders' value propositions were elicited via interviews, which were analyzed using Grounded Theory coding techniques (open and selective coding). Thirty-six value propositions were identified and classified into six dimensions: customer value, market competitiveness, economic value/profitability, cost efficiency, technology & architecture, and company strategy. Our results show that although propositions in the customer value dimension were those mentioned the most, the concept of value for feature selection encompasses a wide range of value propositions. Moreover, stakeholder groups focused on different and complementary value dimensions, calling to the importance of involving all key stakeholders in the decision making process. Although our results are particularly relevant to companies similar to the one described herein, they aim to generate a learning process on value-based feature selection for practitioners and researchers in general.Keywords Decision Making, Feature Selection, Profitability, Software Engineering, Value Based Decision Making, Stakeholder Groups, Open Coding, Selective Coding, Customer Value Dimension, Complementary Value Dimensions, Decision Making Process, Value Based Feature Selection, Key Stakeholder Value Propositions, Grounded Theory Coding Techniques, Telecommunications Company Software Intensive Product, Learning Process, Stakeholders, Software Engineering, Feature Extraction, Decision Making, Economics, Value Based Software Engineering VBSE, Feature Selection, Release Planning, Decision Making, Value Proposition, Stakeholder Analysis, Key Stakeholders, Software Intensive Systems, Case Study, Grounded Theory"
A Model-Integrated Approach to Designing Self-Protecting Systems,"Abstract One of the major trends in research on Self-Protecting Systems is to use a model of the system to be protected to predict its evolution. However, very often, devising the model requires special knowledge of mathematical frameworks, that prevents the adoption of this technique outside of the academic environment. Furthermore, some of the proposed approaches suffer from the curse of dimensionality, as their complexity is exponential in the size of the protected system. In this paper, we introduce a model-integrated approach for the design of Self-Protecting Systems, which automatically generates and solves Markov Decision Processes (MDPs) to obtain optimal defense strategies for systems under attack. MDPs are created in such a way that the size of the state space does not depend on the size of the system, but on the scope of the attack, which allows us to apply it to systems of arbitrary size.Keywords Markov Processes, Security Of Data, Model Integrated Approach, Protected System, Self Protecting Systems, Marko V Decision Processes, Optimal Defense Strategies, Curse Of Dimensionality, Computational Modeling, Servers, Microwave Integrated Circuits, Predictive Models, Security, Mathematical Model, Intrusion Response System, Autonomic Security Management"
Platform-Independent Dynamic Taint Analysis for JavaScript,"Abstract Previous approaches to dynamic taint analysis for JavaScript are implemented directly in a browser or JavaScript engine, limiting their applicability to a single platform and requiring ongoing maintenance as platforms evolve, or they require nontrivial program transformations. We present an approach that relies on instrumentation to encode taint propagation as instructions for an abstract machine. Our approach has two key advantages: it is platform-independent and can be used with any existing JavaScript engine, and it can track taint on primitive values without requiring the introduction of wrapper objects. Furthermore, our technique enables multiple deployment scenarios by varying when and where the generated instructions are executed and it supports indirect taint sources, i.e., situations where taint enters an application via arguments passed to dynamically registered event-listener functions. We implemented the technique for the ECMAScript 5 language in a tool called Ichnaea, and evaluated it on 22 NPM modules containing several types of injection vulnerabilities, including 4 modules containing vulnerabilities that were not previously discovered and reported. On these modules, run-time overheads range from 3.17x to 38.42x, which is significantly better than a previous transformation-based technique. We also report on a case study that shows how Ichnaea can be used to detect privacy leaks in a Tizen web application for the Samsung Gear S2 smart watch.Keywords Authoring Languages, Data Privacy, Internet, Program Compilers, Wearable Computers, Platform Independent Dynamic Taint Analysis, Nontrivial Program Transformations, Taint Propagation, Abstract Machine, Java Script Engine, Multiple Deployment Scenarios, Dynamically Registered Event Listener Functions, Tizen Web Application, ECMA Script 5 Language, Ichnaea, Privacy Leaks Detection, Wrapper Objects, Samsung Gear S 2 Smart Watch, NPM Modules, Java, Instruments, Browsers, Software Engineering, Privacy, Data Privacy, Taint Analysis, Dynamic Analysis, Java Script, Platform Independent, Instrumentation"
